import { defineComponent as y, createVNode as f, reactive as H, shallowRef as $, computed as b, onMounted as x, onBeforeUnmount as w } from "vue";
import { throttle as O } from "@vavt/util";
import { p as h } from "./chunks/config.mjs";
import { c as S, b as T } from "./chunks/index4.mjs";
const M = {
  tocItem: {
    type: Object,
    default: () => ({})
  },
  mdHeadingId: {
    type: Function,
    default: () => {
    }
  },
  scrollElement: {
    type: [String, Object],
    default: ""
  },
  onClick: {
    type: Function,
    default: () => {
    }
  },
  scrollElementOffsetTop: {
    type: Number,
    default: 0
  }
}, C = /* @__PURE__ */ y({
  props: M,
  setup(l) {
    return () => {
      const {
        tocItem: o,
        mdHeadingId: i,
        scrollElement: n,
        onClick: u,
        scrollElementOffsetTop: E
      } = l;
      return f("div", {
        class: [`${h}-catalog-link`, o.active && `${h}-catalog-active`],
        onClick: (s) => {
          u(s, o), s.stopPropagation();
          const g = i(o.text, o.level, o.index), d = document.getElementById(g), e = n instanceof Element ? n : document.querySelector(n);
          if (d && e) {
            let t = d.offsetParent, c = d.offsetTop;
            if (e.contains(t))
              for (; t && e != t; )
                c += t == null ? void 0 : t.offsetTop, t = t == null ? void 0 : t.offsetParent;
            e == null || e.scrollTo({
              top: c - E,
              behavior: "smooth"
            });
          }
        }
      }, [f("span", {
        title: o.text
      }, [o.text]), f("div", {
        class: `${h}-catalog-wrapper`
      }, [o.children && o.children.map((s) => f(C, {
        mdHeadingId: i,
        key: `${o.text}-link-${s.level}-${s.text}`,
        tocItem: s,
        scrollElement: n,
        onClick: u,
        scrollElementOffsetTop: E
      }, null))])]);
    };
  }
}), N = C, L = {
  /**
   * 编辑器的Id，务必与需要绑定的编辑器Id相同
   */
  editorId: {
    type: String
  },
  class: {
    type: String,
    default: ""
  },
  mdHeadingId: {
    type: Function,
    default: (l) => l
  },
  /**
   * 指定滚动的容器，选择器需带上对应的符号，默认预览框
   * 元素必须定位！！！！！！
   *
   * 默认：#md-editor-preview-wrapper
   */
  scrollElement: {
    type: [String, Object]
  },
  theme: {
    type: String,
    default: "light"
  },
  /**
   * 高亮标题相对滚动容器顶部偏移量，即距离该值时，高亮当前目录菜单项
   *
   * 默认：20px
   */
  offsetTop: {
    type: Number,
    default: 20
  },
  /**
   * 滚动区域的固定顶部高度
   *
   * 默认：0
   */
  scrollElementOffsetTop: {
    type: Number,
    default: 0
  },
  onClick: {
    type: Function
  }
}, F = /* @__PURE__ */ y({
  name: "MdCatalog",
  props: L,
  emits: ["onClick"],
  setup(l, o) {
    const i = l.editorId, n = H({
      list: [],
      show: !1,
      scrollElement: l.scrollElement || `#${i}-preview-wrapper`
    }), u = $(), E = b(() => {
      const e = [];
      return n.list.forEach((t, c) => {
        const {
          text: p,
          level: k
        } = t, a = {
          level: k,
          text: p,
          index: c + 1,
          active: u.value === t
        };
        if (e.length === 0)
          e.push(a);
        else {
          let r = e[e.length - 1];
          if (a.level > r.level)
            for (let m = r.level + 1; m <= 6; m++) {
              const {
                children: v
              } = r;
              if (!v) {
                r.children = [a];
                break;
              }
              if (r = v[v.length - 1], a.level <= r.level) {
                v.push(a);
                break;
              }
            }
          else
            e.push(a);
        }
      }), e;
    }), s = () => n.scrollElement instanceof HTMLElement ? n.scrollElement : document.querySelector(n.scrollElement), g = O((e) => {
      if (e.length === 0)
        return n.list = [], !1;
      const {
        activeHead: t
      } = e.reduce((c, p, k) => {
        const a = document.getElementById(l.mdHeadingId(p.text, p.level, k + 1));
        if (a instanceof HTMLElement) {
          const r = s(), m = S(a, r);
          if (m < l.offsetTop && m > c.minTop)
            return {
              activeHead: p,
              minTop: m
            };
        }
        return c;
      }, {
        activeHead: e[0],
        minTop: Number.MIN_SAFE_INTEGER
      });
      u.value = t, n.list = e;
    }), d = () => {
      g(n.list);
    };
    return x(() => {
      var t;
      const e = s();
      (t = e === document.documentElement ? window : e) == null || t.addEventListener("scroll", d), T.on(i, {
        name: "catalogChanged",
        callback: (c) => {
          g(c);
        }
      }), T.emit(i, "pushCatalog");
    }), w(() => {
      var t;
      const e = s();
      (t = e === document.documentElement ? window : e) == null || t.removeEventListener("scroll", d);
    }), () => f("div", {
      class: `${h}-catalog${l.theme === "dark" ? "-dark" : ""} ${l.class}`
    }, [E.value.map((e) => f(N, {
      mdHeadingId: l.mdHeadingId,
      tocItem: e,
      key: `link-${e.level}-${e.text}`,
      scrollElement: n.scrollElement,
      onClick: (t, c) => {
        l.onClick ? l.onClick(t, c) : o.emit("onClick", t, c);
      },
      scrollElementOffsetTop: l.scrollElementOffsetTop
    }, null))]);
  }
}), I = F;
I.install = (l) => (l.component(I.name, I), l);
export {
  I as default
};
