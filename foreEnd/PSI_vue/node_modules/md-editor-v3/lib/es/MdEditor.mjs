var Ze = Object.defineProperty;
var Je = (e, o, a) => o in e ? Ze(e, o, { enumerable: !0, configurable: !0, writable: !0, value: a }) : e[o] = a;
var U = (e, o, a) => (Je(e, typeof o != "symbol" ? o + "" : o, a), a);
import { defineComponent as O, createVNode as t, inject as S, ref as G, onMounted as z, reactive as Z, computed as fe, watch as F, nextTick as me, Fragment as Ke, toRef as te, shallowRef as Xe, onBeforeUnmount as Qe } from "vue";
import { p as n, a as W, s as et, b as tt, d as lt } from "./chunks/config.mjs";
import { a as ee, D as ot } from "./chunks/index2.mjs";
import { b as h, a as at } from "./chunks/index4.mjs";
import { linkTo as nt, debounce as rt, throttle as it, smoothScroll as Ee } from "@vavt/util";
import { C as st, a as ct, O as je, T as dt, b as ut, e as mt, c as ft, u as gt, d as ht, f as bt, g as vt, h as pt, i as kt, M as Ct } from "./chunks/index.mjs";
import { a as $t } from "./chunks/dom.mjs";
import { a as _e, M as yt } from "./chunks/index3.mjs";
import { minimalSetup as xt, EditorView as re } from "codemirror";
import { EditorView as ge, placeholder as wt, keymap as Tt } from "@codemirror/view";
import { languages as St } from "@codemirror/language-data";
import { markdown as At } from "@codemirror/lang-markdown";
import { deleteLine as Mt, indentWithTab as Lt, undo as Dt, redo as Et } from "@codemirror/commands";
import { HighlightStyle as We, syntaxHighlighting as ze, indentUnit as Ht } from "@codemirror/language";
import { tags as s } from "@lezer/highlight";
import { EditorSelection as P, EditorState as se, Compartment as It, StateEffect as Bt } from "@codemirror/state";
import { autocompletion as Ft } from "@codemirror/autocomplete";
import Ye from "./MdCatalog.mjs";
import { g as He } from "./chunks/vue-tsx.mjs";
import Ot from "./NormalToolbar.mjs";
import "medium-zoom";
import "copy-to-clipboard";
import "markdown-it";
import "markdown-it-image-figures";
import "markdown-it-task-lists";
import "lru-cache";
const Vt = /* @__PURE__ */ O({
  setup() {
    return () => t("div", {
      class: `${n}-divider`
    }, null);
  }
}), Rt = {
  noPrettier: {
    type: Boolean
  },
  // 工具栏选择显示
  toolbars: {
    type: Array,
    default: () => []
  },
  // 工具栏选择不显示
  toolbarsExclude: {
    type: Array,
    default: () => []
  },
  setting: {
    type: Object,
    default: () => ({})
  },
  screenfull: {
    type: Object,
    default: null
  },
  screenfullJs: {
    type: String,
    default: ""
  },
  updateSetting: {
    type: Function,
    default: () => {
    }
  },
  tableShape: {
    type: Array,
    default: () => [6, 4]
  },
  defToolbars: {
    type: Object
  },
  noUploadImg: {
    type: Boolean
  }
}, Pt = (e) => {
  var f, u, d, v;
  const o = S("editorId");
  let a = (u = (f = W.editorExtensions) == null ? void 0 : f.screenfull) == null ? void 0 : u.instance;
  const l = (v = (d = W.editorExtensions) == null ? void 0 : d.screenfull) == null ? void 0 : v.js, i = G(!1), r = (y) => {
    if (!a) {
      h.emit(o, "errorCatcher", {
        name: "fullscreen",
        message: "fullscreen is undefined"
      });
      return;
    }
    a.isEnabled ? (i.value = !0, (y === void 0 ? !a.isFullscreen : y) ? a.request() : a.exit()) : console.error("browser does not support screenfull!");
  }, c = () => {
    a && a.isEnabled && a.on("change", () => {
      (i.value || e.setting.fullscreen) && (i.value = !1, e.updateSetting("fullscreen"));
    });
  }, m = () => {
    a = window.screenfull, c();
  };
  return z(() => {
    if (c(), !a) {
      const y = document.createElement("script");
      y.src = l || et, y.onload = m, y.id = `${n}-screenfull`, $t(y, "screenfull");
    }
  }), z(() => {
    h.on(o, {
      name: st,
      callback: r
    });
  }), { fullscreenHandler: r };
}, Nt = {
  tableShape: {
    type: Array,
    default: () => [6, 4]
  },
  onSelected: {
    type: Function,
    default: () => {
    }
  }
}, qt = /* @__PURE__ */ O({
  name: "TableShape",
  props: Nt,
  setup(e) {
    const o = Z({
      x: -1,
      y: -1
    });
    return () => t("div", {
      class: `${n}-table-shape`,
      onMouseleave: () => {
        o.x = -1, o.y = -1;
      }
    }, [new Array(e.tableShape[1]).fill("").map((a, l) => t("div", {
      class: `${n}-table-shape-row`,
      key: `table-shape-row-${l}`
    }, [new Array(e.tableShape[0]).fill("").map((i, r) => t("div", {
      class: `${n}-table-shape-col`,
      key: `table-shape-col-${r}`,
      onMouseenter: () => {
        o.x = l, o.y = r;
      },
      onClick: () => {
        e.onSelected(o);
      }
    }, [t("div", {
      class: [`${n}-table-shape-col-default`, l <= o.x && r <= o.y && `${n}-table-shape-col-include`]
    }, null)]))]))]);
  }
}), Ut = qt, Gt = {
  type: {
    type: String,
    default: "link"
  },
  visible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, Kt = /* @__PURE__ */ O({
  props: Gt,
  setup(e) {
    const o = S("usedLanguageText"), a = S("editorId"), l = fe(() => {
      var r, c;
      switch (e.type) {
        case "link":
          return (r = o.value.linkModalTips) == null ? void 0 : r.linkTitle;
        case "image":
          return (c = o.value.linkModalTips) == null ? void 0 : c.imageTitle;
        default:
          return "";
      }
    }), i = Z({
      desc: "",
      url: ""
    });
    return F(() => e.visible, (r) => {
      r || setTimeout(() => {
        i.desc = "", i.url = "";
      }, 200);
    }), () => t(_e, {
      title: l.value,
      visible: e.visible,
      onClose: e.onCancel
    }, {
      default: () => {
        var r, c, m, f, u;
        return [t("div", {
          class: `${n}-form-item`
        }, [t("label", {
          class: `${n}-label`,
          for: `link-desc-${a}`
        }, [(r = o.value.linkModalTips) == null ? void 0 : r.descLabel]), t("input", {
          placeholder: (c = o.value.linkModalTips) == null ? void 0 : c.descLabelPlaceHolder,
          class: `${n}-input`,
          id: `link-desc-${a}`,
          type: "text",
          value: i.desc,
          onChange: (d) => {
            i.desc = d.target.value;
          },
          autocomplete: "off"
        }, null)]), t("div", {
          class: `${n}-form-item`
        }, [t("label", {
          class: `${n}-label`,
          for: `link-url-${a}`
        }, [(m = o.value.linkModalTips) == null ? void 0 : m.urlLabel]), t("input", {
          placeholder: (f = o.value.linkModalTips) == null ? void 0 : f.urlLabelPlaceHolder,
          class: `${n}-input`,
          id: `link-url-${a}`,
          type: "text",
          value: i.url,
          onChange: (d) => {
            i.url = d.target.value;
          },
          autocomplete: "off"
        }, null)]), t("div", {
          class: `${n}-form-item`
        }, [t("button", {
          class: [`${n}-btn`, `${n}-btn-row`],
          type: "button",
          onClick: () => {
            e.onOk(i), i.desc = "", i.url = "";
          }
        }, [(u = o.value.linkModalTips) == null ? void 0 : u.buttonOK])])];
      }
    });
  }
}), jt = {
  visible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, _t = /* @__PURE__ */ O({
  props: jt,
  setup(e) {
    var d, v, y;
    const o = S("usedLanguageText"), a = S("editorId");
    let l = (y = (v = (d = W) == null ? void 0 : d.editorExtensions) == null ? void 0 : v.cropper) == null ? void 0 : y.instance;
    const i = G(), r = G(), c = G(), m = Z({
      cropperInited: !1,
      imgSelected: !1,
      imgSrc: "",
      // 是否全屏
      isFullscreen: !1
    });
    let f = null;
    F(() => e.visible, () => {
      e.visible && !m.cropperInited && (l = l || window.Cropper, i.value.onchange = () => {
        if (!l) {
          h.emit(a, "errorCatcher", {
            name: "Cropper",
            message: "Cropper is undefined"
          });
          return;
        }
        const b = i.value.files || [];
        if (m.imgSelected = !0, (b == null ? void 0 : b.length) > 0) {
          const p = new FileReader();
          p.onload = (g) => {
            m.imgSrc = g.target.result, me(() => {
              f = new l(r.value, {
                viewMode: 2,
                preview: `.${n}-clip-preview-target`
                // aspectRatio: 16 / 9,
              });
            });
          }, p.readAsDataURL(b[0]);
        }
      });
    }), F(() => [m.imgSelected], () => {
      c.value.style = "";
    }), F(() => m.isFullscreen, () => {
      me(() => {
        f == null || f.destroy(), c.value.style = "", r.value && (f = new l(r.value, {
          viewMode: 2,
          preview: `.${n}-clip-preview-target`
          // aspectRatio: 16 / 9,
        }));
      });
    });
    const u = () => {
      f.clear(), f.destroy(), f = null, i.value.value = "", m.imgSelected = !1;
    };
    return () => {
      var b;
      return t(_e, {
        class: `${n}-modal-clip`,
        title: (b = o.value.clipModalTips) == null ? void 0 : b.title,
        visible: e.visible,
        onClose: e.onCancel,
        showAdjust: !0,
        isFullscreen: m.isFullscreen,
        onAdjust: (p) => {
          m.isFullscreen = p;
        },
        width: "668px",
        height: "421px"
      }, {
        default: () => {
          var p, g;
          return [t("div", {
            class: `${n}-form-item ${n}-clip`
          }, [t("div", {
            class: `${n}-clip-main`
          }, [m.imgSelected ? t("div", {
            class: `${n}-clip-cropper`
          }, [t("img", {
            src: m.imgSrc,
            ref: r,
            style: {
              display: "none"
            },
            alt: ""
          }, null), t("div", {
            class: `${n}-clip-delete`,
            onClick: u
          }, [t("svg", {
            class: `${n}-icon`,
            "aria-hidden": "true"
          }, [t("use", {
            "xlink:href": "#md-editor-icon-delete"
          }, null)])])]) : t("div", {
            class: `${n}-clip-upload`,
            onClick: () => {
              i.value.click();
            }
          }, [t("svg", {
            class: `${n}-icon`,
            "aria-hidden": "true"
          }, [t("use", {
            "xlink:href": "#md-editor-icon-upload"
          }, null)])])]), t("div", {
            class: `${n}-clip-preview`
          }, [t("div", {
            class: `${n}-clip-preview-target`,
            ref: c
          }, null)])]), t("div", {
            class: `${n}-form-item`
          }, [t("button", {
            class: `${n}-btn`,
            type: "button",
            onClick: () => {
              if (f) {
                const k = f.getCroppedCanvas();
                h.emit(a, "uploadImage", [at(k.toDataURL("image/png"))], e.onOk), u();
              }
            }
          }, [((p = o.value.clipModalTips) == null ? void 0 : p.buttonUpload) || ((g = o.value.linkModalTips) == null ? void 0 : g.buttonOK)])]), t("input", {
            ref: i,
            accept: "image/*",
            type: "file",
            multiple: !1,
            style: {
              display: "none"
            }
          }, null)];
        }
      });
    };
  }
}), Wt = {
  type: {
    type: String,
    default: "link"
  },
  linkVisible: {
    type: Boolean,
    default: !1
  },
  clipVisible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, zt = /* @__PURE__ */ O({
  props: Wt,
  setup(e) {
    return () => t(Ke, null, [t(Kt, {
      type: e.type,
      visible: e.linkVisible,
      onOk: e.onOk,
      onCancel: e.onCancel
    }, null), t(_t, {
      visible: e.clipVisible,
      onOk: e.onOk,
      onCancel: e.onCancel
    }, null)]);
  }
}), Yt = /* @__PURE__ */ O({
  name: "MDEditorToolbar",
  props: Rt,
  setup(e) {
    const o = S("editorId"), a = S("usedLanguageText"), {
      fullscreenHandler: l
    } = Pt(e), i = `${o}-toolbar-wrapper`, r = Z({
      title: !1,
      catalog: !1,
      // 图片上传下拉
      image: !1,
      // 表格预选
      table: !1,
      // mermaid
      mermaid: !1,
      katex: !1
    }), c = (b, p) => {
      h.emit(o, "replace", b, p);
    }, m = Z({
      type: "link",
      linkVisible: !1,
      clipVisible: !1
    }), f = G();
    z(() => {
      h.on(o, {
        name: "openModals",
        callback(b) {
          m.type = b, m.linkVisible = !0;
        }
      });
    });
    const u = fe(() => {
      const b = e.toolbars.filter((x) => !e.toolbarsExclude.includes(x)), p = b.indexOf("="), g = p === -1 ? b : b.slice(0, p + 1), k = p === -1 ? [] : b.slice(p, Number.MAX_SAFE_INTEGER);
      return [g, k];
    }), d = G(), v = () => {
      h.emit(o, "uploadImage", Array.from(d.value.files || [])), d.value.value = "";
    };
    z(() => {
      d.value.addEventListener("change", v);
    });
    const y = (b) => {
      var p, g, k, x, T, w, M, C, A, R, L, D, V, I, E, K, N, ae, J, j, q, X, _, H, B, Q, ne, he, be, ve, pe, ke, Ce, $e, ye, xe, we, Te, Se, Ae, Me, Le, De;
      if (tt.includes(b))
        switch (b) {
          case "-":
            return t(Vt, null, null);
          case "bold":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (p = a.value.toolbarTips) == null ? void 0 : p.bold,
              onClick: () => {
                c("bold");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-bold"
            }, null)])]);
          case "underline":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (g = a.value.toolbarTips) == null ? void 0 : g.underline,
              onClick: () => {
                c("underline");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-underline"
            }, null)])]);
          case "italic":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (k = a.value.toolbarTips) == null ? void 0 : k.italic,
              onClick: () => {
                c("italic");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-italic"
            }, null)])]);
          case "strikeThrough":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (x = a.value.toolbarTips) == null ? void 0 : x.strikeThrough,
              onClick: () => {
                c("strikeThrough");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-strike-through"
            }, null)])]);
          case "title":
            return t(ee, {
              relative: `#${i}`,
              visible: r.title,
              onChange: ($) => {
                r.title = $;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  r.title = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("h1");
                }
              }, [(T = a.value.titleItem) == null ? void 0 : T.h1]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("h2");
                }
              }, [(w = a.value.titleItem) == null ? void 0 : w.h2]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("h3");
                }
              }, [(M = a.value.titleItem) == null ? void 0 : M.h3]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("h4");
                }
              }, [(C = a.value.titleItem) == null ? void 0 : C.h4]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("h5");
                }
              }, [(A = a.value.titleItem) == null ? void 0 : A.h5]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("h6");
                }
              }, [(R = a.value.titleItem) == null ? void 0 : R.h6])])
            }, {
              default: () => {
                var $;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: ($ = a.value.toolbarTips) == null ? void 0 : $.title
                }, [t("svg", {
                  class: `${n}-icon`,
                  "aria-hidden": "true"
                }, [t("use", {
                  "xlink:href": "#md-editor-icon-title"
                }, null)])])];
              }
            });
          case "sub":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (L = a.value.toolbarTips) == null ? void 0 : L.sub,
              onClick: () => {
                c("sub");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-sub"
            }, null)])]);
          case "sup":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (D = a.value.toolbarTips) == null ? void 0 : D.sup,
              onClick: () => {
                c("sup");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-sup"
            }, null)])]);
          case "quote":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (V = a.value.toolbarTips) == null ? void 0 : V.quote,
              onClick: () => {
                c("quote");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-quote"
            }, null)])]);
          case "unorderedList":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (I = a.value.toolbarTips) == null ? void 0 : I.unorderedList,
              onClick: () => {
                c("unorderedList");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-unordered-list"
            }, null)])]);
          case "orderedList":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (E = a.value.toolbarTips) == null ? void 0 : E.orderedList,
              onClick: () => {
                c("orderedList");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-ordered-list"
            }, null)])]);
          case "task":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (K = a.value.toolbarTips) == null ? void 0 : K.task,
              onClick: () => {
                c("task");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-task"
            }, null)])]);
          case "codeRow":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (N = a.value.toolbarTips) == null ? void 0 : N.codeRow,
              onClick: () => {
                c("codeRow");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-code-row"
            }, null)])]);
          case "code":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (ae = a.value.toolbarTips) == null ? void 0 : ae.code,
              onClick: () => {
                c("code");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-code"
            }, null)])]);
          case "link":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (J = a.value.toolbarTips) == null ? void 0 : J.link,
              onClick: () => {
                m.type = "link", m.linkVisible = !0;
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-link"
            }, null)])]);
          case "image":
            return e.noUploadImg ? t("div", {
              class: `${n}-toolbar-item`,
              title: (j = a.value.toolbarTips) == null ? void 0 : j.image,
              onClick: () => {
                m.type = "image", m.linkVisible = !0;
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-image"
            }, null)])]) : t(ee, {
              relative: `#${i}`,
              visible: r.image,
              onChange: ($) => {
                r.image = $;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  r.title = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  m.type = "image", m.linkVisible = !0;
                }
              }, [(q = a.value.imgTitleItem) == null ? void 0 : q.link]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  d.value.click();
                }
              }, [(X = a.value.imgTitleItem) == null ? void 0 : X.upload]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  m.clipVisible = !0;
                }
              }, [(_ = a.value.imgTitleItem) == null ? void 0 : _.clip2upload])])
            }, {
              default: () => {
                var $;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: ($ = a.value.toolbarTips) == null ? void 0 : $.image
                }, [t("svg", {
                  class: `${n}-icon`,
                  "aria-hidden": "true"
                }, [t("use", {
                  "xlink:href": "#md-editor-icon-image"
                }, null)])])];
              }
            });
          case "table":
            return t(ee, {
              relative: `#${i}`,
              visible: r.table,
              onChange: ($) => {
                r.table = $;
              },
              key: "bar-table",
              overlay: t(Ut, {
                tableShape: e.tableShape,
                onSelected: ($) => {
                  c("table", {
                    selectedShape: $
                  });
                }
              }, null)
            }, {
              default: () => {
                var $;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: ($ = a.value.toolbarTips) == null ? void 0 : $.table
                }, [t("svg", {
                  class: `${n}-icon`,
                  "aria-hidden": "true"
                }, [t("use", {
                  "xlink:href": "#md-editor-icon-table"
                }, null)])])];
              }
            });
          case "revoke":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (H = a.value.toolbarTips) == null ? void 0 : H.revoke,
              onClick: () => {
                h.emit(o, "ctrlZ");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-revoke"
            }, null)])]);
          case "next":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (B = a.value.toolbarTips) == null ? void 0 : B.next,
              onClick: () => {
                h.emit(o, "ctrlShiftZ");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-next"
            }, null)])]);
          case "save":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Q = a.value.toolbarTips) == null ? void 0 : Q.save,
              onClick: () => {
                h.emit(o, je);
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-baocun"
            }, null)])]);
          case "prettier":
            return e.noPrettier ? "" : t("div", {
              class: `${n}-toolbar-item`,
              title: (ne = a.value.toolbarTips) == null ? void 0 : ne.prettier,
              onClick: () => {
                c("prettier");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-prettier"
            }, null)])]);
          case "pageFullscreen":
            return !e.setting.fullscreen && t("div", {
              class: `${n}-toolbar-item`,
              title: (he = a.value.toolbarTips) == null ? void 0 : he.pageFullscreen,
              onClick: () => {
                e.updateSetting("pageFullscreen");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": `#md-editor-icon-${e.setting.pageFullscreen ? "suoxiao" : "fangda"}`
            }, null)])]);
          case "fullscreen":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (be = a.value.toolbarTips) == null ? void 0 : be.fullscreen,
              onClick: () => {
                l();
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": `#md-editor-icon-${e.setting.fullscreen ? "fullscreen-exit" : "fullscreen"}`
            }, null)])]);
          case "preview":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (ve = a.value.toolbarTips) == null ? void 0 : ve.preview,
              onClick: () => {
                e.updateSetting("preview");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-preview"
            }, null)])]);
          case "htmlPreview":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (pe = a.value.toolbarTips) == null ? void 0 : pe.htmlPreview,
              onClick: () => {
                e.updateSetting("htmlPreview");
              }
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-coding"
            }, null)])]);
          case "catalog":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (ke = a.value.toolbarTips) == null ? void 0 : ke.catalog,
              onClick: () => {
                h.emit(o, ct);
              },
              key: "bar-catalog"
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-catalog"
            }, null)])]);
          case "github":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ce = a.value.toolbarTips) == null ? void 0 : Ce.github,
              onClick: () => nt("https://github.com/imzbf/md-editor-v3")
            }, [t("svg", {
              class: `${n}-icon`,
              "aria-hidden": "true"
            }, [t("use", {
              "xlink:href": "#md-editor-icon-github"
            }, null)])]);
          case "mermaid":
            return t(ee, {
              relative: `#${i}`,
              visible: r.mermaid,
              onChange: ($) => {
                r.mermaid = $;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  r.mermaid = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("flow");
                }
              }, [($e = a.value.mermaid) == null ? void 0 : $e.flow]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("sequence");
                }
              }, [(ye = a.value.mermaid) == null ? void 0 : ye.sequence]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("gantt");
                }
              }, [(xe = a.value.mermaid) == null ? void 0 : xe.gantt]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("class");
                }
              }, [(we = a.value.mermaid) == null ? void 0 : we.class]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("state");
                }
              }, [(Te = a.value.mermaid) == null ? void 0 : Te.state]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("pie");
                }
              }, [(Se = a.value.mermaid) == null ? void 0 : Se.pie]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("relationship");
                }
              }, [(Ae = a.value.mermaid) == null ? void 0 : Ae.relationship]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("journey");
                }
              }, [(Me = a.value.mermaid) == null ? void 0 : Me.journey])]),
              key: "bar-mermaid"
            }, {
              default: () => {
                var $;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: ($ = a.value.toolbarTips) == null ? void 0 : $.mermaid
                }, [t("svg", {
                  class: `${n}-icon`,
                  "aria-hidden": "true"
                }, [t("use", {
                  "xlink:href": "#md-editor-icon-mermaid"
                }, null)])])];
              }
            });
          case "katex":
            return t(ee, {
              relative: `#${i}`,
              visible: r.katex,
              onChange: ($) => {
                r.katex = $;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  r.katex = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("katexInline");
                }
              }, [(Le = a.value.katex) == null ? void 0 : Le.inline]), t("li", {
                class: `${n}-menu-item`,
                onClick: () => {
                  c("katexBlock");
                }
              }, [(De = a.value.katex) == null ? void 0 : De.block])]),
              key: "bar-katex"
            }, {
              default: () => {
                var $;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: ($ = a.value.toolbarTips) == null ? void 0 : $.katex
                }, [t("svg", {
                  class: `${n}-icon`,
                  "aria-hidden": "true"
                }, [t("use", {
                  "xlink:href": "#md-editor-icon-formula"
                }, null)])])];
              }
            });
        }
      else
        return e.defToolbars instanceof Array ? e.defToolbars[b] || "" : e.defToolbars && e.defToolbars.children instanceof Array && e.defToolbars.children[b] || "";
    };
    return () => {
      const b = u.value[0].map((g) => y(g)), p = u.value[1].map((g) => y(g));
      return t(Ke, null, [e.toolbars.length > 0 && t("div", {
        class: `${n}-toolbar-wrapper`,
        id: i
      }, [t("div", {
        class: `${n}-toolbar`
      }, [t("div", {
        class: `${n}-toolbar-left`,
        ref: f
      }, [b]), t("div", {
        class: `${n}-toolbar-right`
      }, [p])])]), t("input", {
        ref: d,
        accept: "image/*",
        type: "file",
        multiple: !0,
        style: {
          display: "none"
        }
      }, null), t(zt, {
        linkVisible: m.linkVisible,
        clipVisible: m.clipVisible,
        type: m.type,
        onCancel: () => {
          m.linkVisible = !1, m.clipVisible = !1;
        },
        onOk: (g) => {
          g && c(m.type, {
            desc: g.desc,
            url: g.url
          }), m.linkVisible = !1, m.clipVisible = !1;
        }
      }, null)]);
    };
  }
}), Zt = (e, o) => {
  const a = rt(() => {
    e.removeEventListener("scroll", l), e.addEventListener("scroll", l), o.removeEventListener("scroll", l), o.addEventListener("scroll", l);
  }, 50), l = (i) => {
    const r = e.clientHeight, c = o.clientHeight, m = e.scrollHeight, f = o.scrollHeight, u = (m - r) / (f - c);
    i.target === e ? (o.removeEventListener("scroll", l), o.scrollTo({
      top: e.scrollTop / u
      // behavior: 'smooth'
    }), a()) : (e.removeEventListener("scroll", l), e.scrollTo({
      top: o.scrollTop * u
      // behavior: 'smooth'
    }), a());
  };
  return [
    () => {
      a().finally(() => {
        e.dispatchEvent(new Event("scroll"));
      });
    },
    () => {
      e.removeEventListener("scroll", l), o.removeEventListener("scroll", l);
    }
  ];
}, Jt = (e, o, a) => {
  const { view: l } = a, i = (v) => l.lineBlockAt(l.state.doc.line(v).from).top, r = (v) => l.lineBlockAt(l.state.doc.line(v).from).height;
  let c = [];
  const m = () => {
    c = [];
    const v = Array.from(o.querySelectorAll("[data-line]")).map(
      (g) => Number(g.dataset.line) + 1
    ), { lines: y } = l.state.doc;
    let b = 1, p = v.shift() ?? y;
    for (let g = 1; g <= y; g++)
      g === p && (b = g, p = v.shift() || y + 1), c.push({
        start: b,
        end: p - 1
      });
  };
  let f = 0, u = 0;
  const d = it((v) => {
    var p, g, k, x, T, w, M;
    if (!((p = o.firstElementChild) != null && p.firstElementChild))
      return;
    const y = l.lineBlockAtHeight(l.scrollDOM.scrollTop), { number: b } = l.state.doc.lineAt(y.from);
    if (!(b > c.length) && !(l.state.doc.lines < c[c.length - 1].end))
      if (v.target === e) {
        if (u !== 0)
          return;
        f++;
        const C = c[b - 1], A = i(C.end) + r(C.end);
        let R = 0;
        const L = i(C.start), D = o.querySelector(`[data-line="${C.start - 1}"]`) || ((g = o.firstElementChild) == null ? void 0 : g.firstElementChild), V = o.querySelector(`[data-line="${C.end}"]`) || ((k = o.lastElementChild) == null ? void 0 : k.lastElementChild);
        let I = 0, E = 0;
        L === 0 ? (R = (l.scrollDOM.scrollTop - L) / (A - L), I = V.offsetTop) : A > l.scrollDOM.scrollHeight - l.scrollDOM.clientHeight ? (R = (l.scrollDOM.scrollTop - L) / (l.scrollDOM.scrollHeight - l.scrollDOM.clientHeight - L), E = D.offsetTop, I = o.scrollHeight - o.clientHeight - E + 10) : (R = (l.scrollDOM.scrollTop - L) / (A - L), E = D.offsetTop, I = V.offsetTop - E);
        const K = E - 10 + I * R;
        Ee(o, K, () => {
          f--;
        });
      } else {
        if (f !== 0)
          return;
        u++;
        const C = Array.from(
          o.querySelectorAll("[data-line]")
        ), A = o.scrollTop, R = o.scrollHeight;
        let L = C.length === 0 ? 1 : Math.ceil(
          Number(C[C.length - 1].dataset.line) * (A / R)
        ), D = (x = o.firstElementChild) == null ? void 0 : x.firstElementChild;
        for (let H = L; H >= 0; H--) {
          const B = o.querySelector(`[data-line="${H}"]`);
          if (B && B.offsetTop <= A) {
            D = B, L = H;
            break;
          }
        }
        let V = (T = o.firstElementChild) == null ? void 0 : T.firstElementChild, I = (w = o.firstElementChild) == null ? void 0 : w.lastElementChild;
        for (; C.length > 0; ) {
          const H = C.indexOf(D);
          if (H + 1 >= C.length)
            break;
          const B = C[H + 1];
          if (H === -1) {
            I = B;
            break;
          }
          const Q = D.offsetTop;
          if (Q > A) {
            if (H === 0) {
              V = D, I = B;
              break;
            }
            D = C[H - 1];
            continue;
          }
          const ne = B.offsetTop;
          if (Q <= A && ne > A) {
            V = D, I = B;
            break;
          }
          D = B;
        }
        const E = V.offsetTop, K = I.offsetTop;
        let N = 0;
        const { start: ae, end: J } = c[Number(V.dataset.line || 0)], j = i(ae);
        let q = i(J);
        const X = r(J);
        let _ = 0;
        V === ((M = o.firstElementChild) == null ? void 0 : M.firstElementChild) ? (N = Math.max(A / K, 0), _ = q + X - j) : q > l.scrollDOM.scrollHeight - l.scrollDOM.clientHeight ? (N = Math.max(
          (A - E) / (o.scrollHeight - E - o.clientHeight),
          0
        ), q = i(l.state.doc.lines) + r(l.state.doc.lines), _ = 8 + q - j - e.clientHeight) : (N = Math.max(
          (A - E) / (K - E),
          0
        ), _ = q + X - j), Ee(e, j + _ * N, () => {
          u--;
        });
      }
  }, 10);
  return [
    () => {
      m(), e.addEventListener("scroll", d), o.addEventListener("scroll", d), e.dispatchEvent(new Event("scroll"));
    },
    () => {
      c = [], e.removeEventListener("scroll", d), o.removeEventListener("scroll", d);
    }
  ];
}, Xt = (e, o, a) => {
  const l = S("editorId");
  let i = () => {
  }, r = () => {
  };
  const c = () => {
    i();
    const m = document.querySelector(".cm-scroller"), f = document.querySelector(
      `[id="${l}-preview-wrapper"][data-show="true"]`
    ), u = document.querySelector(
      `[id="${l}-html-wrapper"][data-show="true"]`
    );
    (f || u) && ([r, i] = (f ? Jt : Zt)(
      m,
      f || u,
      a.value
    )), e.scrollAuto && r();
  };
  F(
    [
      o,
      te(e.setting, "preview"),
      te(e.setting, "htmlPreview"),
      te(e.setting, "fullscreen"),
      te(e.setting, "pageFullscreen")
    ],
    () => {
      me(c);
    }
  ), F(
    () => e.scrollAuto,
    (m) => {
      m ? r() : i();
    }
  ), z(c);
}, Qt = Xt, el = (e, o, a) => {
  var d, v, y, b, p, g;
  let l = "", i = 0, r = 0, c = !0, m = !1;
  const f = o.getSelectedText(), u = (d = W.editorConfig) == null ? void 0 : d.mermaidTemplate;
  if (/^h[1-6]{1}$/.test(e)) {
    const k = e.replace(/^h(\d)/, (x, T) => new Array(Number(T)).fill("#", 0, T).join(""));
    l = `${k} ${f}`, i = k.length + 1;
  } else if (e === "prettier") {
    const k = window.prettier || ((y = (v = W.editorExtensions) == null ? void 0 : v.prettier) == null ? void 0 : y.prettierInstance), x = [
      ((b = window.prettierPlugins) == null ? void 0 : b.markdown) || ((g = (p = W.editorExtensions) == null ? void 0 : p.prettier) == null ? void 0 : g.parserMarkdownInstance)
    ];
    !k || x[0] === void 0 ? (h.emit(a.editorId, "errorCatcher", {
      name: "prettier",
      message: "prettier is undefined"
    }), l = o.getValue()) : l = k.format(o.getValue(), {
      parser: "markdown",
      plugins: x
    }), c = !1, m = !0;
  } else
    switch (e) {
      case "bold": {
        l = `**${f}**`, i = 2, r = -2;
        break;
      }
      case "underline": {
        l = `<u>${f}</u>`, i = 3, r = -4;
        break;
      }
      case "italic": {
        l = `*${f}*`, i = 1, r = -1;
        break;
      }
      case "strikeThrough": {
        l = `~~${f}~~`, i = 2, r = -2;
        break;
      }
      case "sub": {
        l = `<sub>${f}</sub>`, i = 5, r = -6;
        break;
      }
      case "sup": {
        l = `<sup>${f}</sup>`, i = 5, r = -6;
        break;
      }
      case "codeRow": {
        l = "`" + f + "`", i = 1, r = -1;
        break;
      }
      case "quote": {
        l = `> ${f}`, i = 2;
        break;
      }
      case "orderedList": {
        l = `1. ${f}`, i = 3;
        break;
      }
      case "unorderedList": {
        l = `- ${f}`, i = 2;
        break;
      }
      case "task": {
        l = `- [ ] ${f}`, i = 6;
        break;
      }
      case "code": {
        const k = a.text || f || "", x = a.mode || "language";
        l = `\`\`\`${x}
${k}
\`\`\`
`, i = 3, r = 3 + x.length - l.length;
        break;
      }
      case "table": {
        l = "|";
        const { selectedShape: k = { x: 1, y: 1 } } = a, { x, y: T } = k;
        for (let w = 0; w <= T; w++)
          l += " col |";
        l += `
|`;
        for (let w = 0; w <= T; w++)
          l += " - |";
        for (let w = 0; w <= x; w++) {
          l += `
|`;
          for (let M = 0; M <= T; M++)
            l += " content |";
        }
        i = 2, r = 5 - l.length;
        break;
      }
      case "link": {
        const { desc: k, url: x } = a;
        l = `[${k}](${x})`, c = !1;
        break;
      }
      case "image": {
        const { desc: k, url: x, urls: T } = a;
        T instanceof Array ? l = T.reduce((w, M) => w + `![${k}](${M})
`, "") : l = `![${k}](${x})
`, c = !1;
        break;
      }
      case "flow": {
        l = `\`\`\`mermaid
${(u == null ? void 0 : u.flow) || `flowchart TD 
  Start --> Stop`}
\`\`\`
`, i = 3, r = 10 - l.length;
        break;
      }
      case "sequence": {
        l = `\`\`\`mermaid
${(u == null ? void 0 : u.sequence) || `sequenceDiagram
  A->>B: hello!
  B-->>A: hi!
  A-)B: bye!`}
\`\`\`
`, i = 3, r = 10 - l.length;
        break;
      }
      case "gantt": {
        l = `\`\`\`mermaid
${(u == null ? void 0 : u.gantt) || `gantt
title A Gantt Diagram
dateFormat  YYYY-MM-DD
section Section
A task  :a1, 2014-01-01, 30d
Another task  :after a1, 20d`}
\`\`\`
`, i = 3, r = 10 - l.length;
        break;
      }
      case "class": {
        l = `\`\`\`mermaid
${(u == null ? void 0 : u.class) || `classDiagram
  class Animal
  Vehicle <|-- Car`}
\`\`\`
`, i = 3, r = 10 - l.length;
        break;
      }
      case "state": {
        l = `\`\`\`mermaid
${(u == null ? void 0 : u.state) || `stateDiagram-v2
  s1 --> s2`}
\`\`\`
`, i = 3, r = 10 - l.length;
        break;
      }
      case "pie": {
        l = `\`\`\`mermaid
${(u == null ? void 0 : u.pie) || `pie title Pets adopted by volunteers
  "Dogs" : 386
  "Cats" : 85
  "Rats" : 15`}
\`\`\`
`, i = 3, r = 10 - l.length;
        break;
      }
      case "relationship": {
        l = `\`\`\`mermaid
${(u == null ? void 0 : u.relationship) || `erDiagram
  CAR ||--o{ NAMED-DRIVER : allows
  PERSON ||--o{ NAMED-DRIVER : is`}
\`\`\`
`, i = 3, r = 10 - l.length;
        break;
      }
      case "journey": {
        l = `\`\`\`mermaid
${(u == null ? void 0 : u.journey) || `journey
  title My working day
  section Go to work
    Make tea: 5: Me
    Go upstairs: 3: Me
    Do work: 1: Me, Cat
  section Go home
    Go downstairs: 5: Me
    Sit down: 5: Me`}
\`\`\`
`, i = 3, r = 10 - l.length;
        break;
      }
      case "katexInline": {
        l = "$$", i = 1, r = -1;
        break;
      }
      case "katexBlock": {
        l = `$$

$$
`, i = 3, r = -4;
        break;
      }
      case "universal": {
        const { generate: k } = a, x = k(f);
        l = x.targetValue, c = x.select, i = x.deviationStart, r = x.deviationEnd;
      }
    }
  return {
    text: l,
    options: {
      // 是否选中
      select: c,
      // 选中时，开始位置的偏移量
      deviationStart: i,
      // 结束的偏移量
      deviationEnd: r,
      // 是否整个替换
      replaceAll: m
    }
  };
}, tl = "#e5c07b", Ie = "var(--md-color)", ll = "#56b6c2", ol = "#ffffff", le = "var(--md-color)", Be = "#e5c07b", al = "#e5c07b", nl = "var(--md-color)", Fe = "#d19a66", rl = "#c678dd", il = "#21252b", sl = "#2c313a", Oe = "var(--md-bk-color)", ce = "var(--md-bk-color)", cl = "#ceedfa33", Ve = "#528bff", dl = ge.theme(
  {
    "&": {
      color: le,
      backgroundColor: Oe
    },
    ".cm-content": {
      caretColor: Ve
    },
    ".cm-cursor, .cm-dropCursor": { borderLeftColor: Ve },
    "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: cl },
    ".cm-panels": { backgroundColor: il, color: le },
    ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
    ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
    ".cm-searchMatch": {
      backgroundColor: "#72a1ff59",
      outline: "1px solid #457dff"
    },
    ".cm-searchMatch.cm-searchMatch-selected": {
      backgroundColor: "#6199ff2f"
    },
    ".cm-activeLine": { backgroundColor: "#ceedfa33" },
    ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
    "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bad0f847"
    },
    ".cm-gutters": {
      backgroundColor: Oe,
      color: le,
      borderRight: "1px solid",
      borderColor: "var(--md-border-color)"
    },
    ".cm-activeLineGutter": {
      backgroundColor: sl
    },
    ".cm-foldPlaceholder": {
      backgroundColor: "transparent",
      border: "none",
      color: "#ddd"
    },
    ".cm-tooltip": {
      border: "1px solid var(--md-border-color)",
      backgroundColor: ce
    },
    ".cm-tooltip .cm-tooltip-arrow:before": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    },
    ".cm-tooltip .cm-tooltip-arrow:after": {
      borderTopColor: ce,
      borderBottomColor: ce
    },
    ".cm-tooltip-autocomplete": {
      "& > ul > li[aria-selected]": {
        color: le
      }
    }
  },
  { dark: !0 }
), ul = We.define([
  { tag: s.keyword, color: rl },
  { tag: [s.name, s.deleted, s.character, s.propertyName, s.macroName], color: Ie },
  { tag: [s.function(s.variableName), s.labelName], color: al },
  { tag: [s.color, s.constant(s.name), s.standard(s.name)], color: Fe },
  { tag: [s.definition(s.name), s.separator], color: le },
  {
    tag: [
      s.typeName,
      s.className,
      s.number,
      s.changed,
      s.annotation,
      s.modifier,
      s.self,
      s.namespace
    ],
    color: tl
  },
  {
    tag: [
      s.operator,
      s.operatorKeyword,
      s.url,
      s.escape,
      s.regexp,
      s.link,
      s.special(s.string)
    ],
    color: ll
  },
  { tag: [s.meta, s.comment], color: Be },
  { tag: s.strong, fontWeight: "bold" },
  { tag: s.emphasis, fontStyle: "italic" },
  { tag: s.strikethrough, textDecoration: "line-through" },
  { tag: s.link, color: Be, textDecoration: "underline" },
  { tag: s.heading, fontWeight: "bold", color: Ie },
  { tag: [s.atom, s.bool, s.special(s.variableName)], color: Fe },
  { tag: [s.processingInstruction, s.string, s.inserted], color: nl },
  { tag: s.invalid, color: ol }
]), ml = [
  dl,
  ze(ul)
], fl = "#e5c07b", Re = "#3f4a54", gl = "#56b6c2", hl = "#fff", oe = "#3f4a54", Pe = "#2d8cf0", bl = "#2d8cf0", vl = "#3f4a54", Ne = "#d19a66", pl = "#c678dd", kl = "#21252b", Cl = "#ceedfa33", qe = "var(--md-bk-color)", de = "var(--md-bk-color)", $l = "#bad5fa", Ue = "#3f4a54", yl = ge.theme(
  {
    "&": {
      color: oe,
      backgroundColor: qe
    },
    ".cm-content": {
      caretColor: Ue
    },
    ".cm-cursor, .cm-dropCursor": { borderLeftColor: Ue },
    "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: $l },
    ".cm-panels": { backgroundColor: kl, color: oe },
    ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
    ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
    ".cm-searchMatch": {
      backgroundColor: "#72a1ff59",
      outline: "1px solid #457dff"
    },
    ".cm-searchMatch.cm-searchMatch-selected": {
      backgroundColor: "#6199ff2f"
    },
    ".cm-activeLine": { backgroundColor: "#ceedfa33" },
    ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
    "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bad0f847"
    },
    ".cm-gutters": {
      backgroundColor: qe,
      color: oe,
      borderRight: "1px solid",
      borderColor: "var(--md-border-color)"
    },
    ".cm-activeLineGutter": {
      backgroundColor: Cl
    },
    ".cm-foldPlaceholder": {
      backgroundColor: "transparent",
      border: "none",
      color: "#ddd"
    },
    ".cm-tooltip": {
      border: "1px solid var(--md-border-color)",
      backgroundColor: de
    },
    ".cm-tooltip .cm-tooltip-arrow:before": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    },
    ".cm-tooltip .cm-tooltip-arrow:after": {
      borderTopColor: de,
      borderBottomColor: de
    },
    ".cm-tooltip-autocomplete": {
      "& > ul > li[aria-selected]": {
        color: oe
      }
    }
  }
  // { dark: true }
), xl = We.define([
  { tag: s.keyword, color: pl },
  { tag: [s.name, s.deleted, s.character, s.propertyName, s.macroName], color: Re },
  { tag: [s.function(s.variableName), s.labelName], color: bl },
  { tag: [s.color, s.constant(s.name), s.standard(s.name)], color: Ne },
  { tag: [s.definition(s.name), s.separator], color: oe },
  {
    tag: [
      s.typeName,
      s.className,
      s.number,
      s.changed,
      s.annotation,
      s.modifier,
      s.self,
      s.namespace
    ],
    color: fl
  },
  {
    tag: [
      s.operator,
      s.operatorKeyword,
      s.url,
      s.escape,
      s.regexp,
      s.link,
      s.special(s.string)
    ],
    color: gl
  },
  { tag: [s.meta, s.comment], color: Pe },
  { tag: s.strong, fontWeight: "bold" },
  { tag: s.emphasis, fontStyle: "italic" },
  { tag: s.strikethrough, textDecoration: "line-through" },
  { tag: s.link, color: Pe, textDecoration: "underline" },
  { tag: s.heading, fontWeight: "bold", color: Re },
  { tag: [s.atom, s.bool, s.special(s.variableName)], color: Ne },
  { tag: [s.processingInstruction, s.string, s.inserted], color: vl },
  { tag: s.invalid, color: hl }
]), wl = [
  yl,
  ze(xl)
], ie = (e, o, a, l, i) => (r, c, m, f) => {
  const u = `${e}${o}`.slice(f - m);
  r.dispatch(r.state.replaceSelection(`${u}${a}${l}`));
  const d = m + c.label.length + (i === "title" ? a.length : 0);
  r.dispatch({
    selection: P.create(
      [
        P.range(
          m + c.label.length + (i === "title" ? 1 : -o.length),
          d
        ),
        P.cursor(d)
      ],
      1
    )
  }), r.focus();
}, Ge = (e) => (o, a, l, i) => {
  const r = e.slice(i - l);
  o.dispatch(o.state.replaceSelection(`${r} `));
}, Tl = (e) => {
  const o = (a) => {
    const l = a.matchBefore(
      /^#+|^-\s*\[*\s*\]*|`+|\[|!\[*|^\|\s?\|?|^\$\$?|!+\s*\w*/
    );
    return l === null || l.from == l.to && a.explicit ? null : {
      from: l.from,
      options: [
        // 标题
        ...["h1", "h2", "h3", "h4", "h5", "h6"].map((i, r) => {
          const c = new Array(r + 1).fill("#").join("");
          return {
            label: c,
            type: "text",
            apply: Ge(c)
          };
        }),
        // 任务列表
        ...["unchecked", "checked"].map((i) => {
          const r = i === "checked" ? "- [x]" : "- [ ]";
          return {
            label: r,
            type: "text",
            apply: Ge(r)
          };
        }),
        // 代码
        ...[
          ["`", ""],
          ["```", "language"],
          ["```mermaid\n", ""]
        ].map((i) => ({
          label: `${i[0]}${i[1]}`,
          type: "text",
          apply: ie(i[0], i[1], "", i[0] === "`" ? "`" : "\n```", "type")
        })),
        // 链接
        {
          label: "[]()",
          type: "text"
        },
        {
          label: "![]()",
          type: "text"
        },
        // 表格
        {
          label: "| |",
          type: "text",
          detail: "table",
          apply: `| col | col | col |
| - | - | - |
| content | content | content |
| content | content | content |`
        },
        // 公式
        {
          label: "$",
          type: "text",
          apply: ie("$", "", "", "$", "type")
        },
        {
          label: "$$",
          type: "text",
          apply: ie("$$", "", `
`, `
$$`, "title")
        },
        // 那啥？
        ...[
          "note",
          "abstract",
          "info",
          "tip",
          "success",
          "question",
          "warning",
          "failure",
          "danger",
          "bug",
          "example",
          "quote",
          "hint",
          "caution",
          "error",
          "attention"
        ].map((i) => ({
          label: `!!! ${i}`,
          type: "text",
          apply: ie("!!!", ` ${i}`, " Title", `

!!!`, "title")
        }))
      ]
    };
  };
  return Ft({
    override: e ? [o, ...e] : [o]
  });
}, Sl = Tl, Y = (e) => {
  const o = new It();
  return (l) => (o.get(e.state) ? e.dispatch({ effects: o.reconfigure(l) }) : e.dispatch({
    effects: Bt.appendConfig.of(o.of(l))
  }), !0);
};
class Al {
  constructor(o) {
    U(this, "view");
    // 切换tabSize的执行方法。切换时，Compartment实例需要相同
    U(this, "toggleTabSize");
    U(this, "togglePlaceholder");
    /**
     * 设置全部的扩展
     */
    U(this, "setExtensions");
    U(this, "toggleDisabled");
    U(this, "toggleReadOnly");
    U(this, "toggleMaxlength");
    this.view = o, this.toggleTabSize = Y(this.view), this.togglePlaceholder = Y(this.view), this.setExtensions = Y(this.view), this.toggleDisabled = Y(this.view), this.toggleReadOnly = Y(this.view), this.toggleMaxlength = Y(this.view);
  }
  getValue() {
    return this.view.state.doc.toString();
  }
  /**
   * 设置内容
   *
   * @param insert 待插入内容
   * @param from 插入开始位置
   * @param to 插入结束位置
   */
  setValue(o, a = 0, l = this.view.state.doc.length) {
    this.view.dispatch({
      changes: {
        from: a,
        to: l,
        insert: o
      }
    });
  }
  /**
   * 获取选中的文本
   */
  getSelectedText() {
    const { from: o, to: a } = this.view.state.selection.main;
    return this.view.state.sliceDoc(o, a);
  }
  /**
   * 使用新的内容替换选中的内容
   *
   * @param text 待替换内容
   * @param options 替换后是否选中
   */
  replaceSelectedText(o, a = {
    // 是否选中
    select: !0,
    // 选中时，开始位置的偏移量
    deviationStart: 0,
    // 结束的偏移量
    deviationEnd: 0,
    // 直接替换所有文本
    replaceAll: !1
  }) {
    if (a.replaceAll) {
      this.setValue(o);
      return;
    }
    const { from: l } = this.view.state.selection.main;
    if (this.view.dispatch(this.view.state.replaceSelection(o)), a.select) {
      const i = l + o.length + a.deviationEnd;
      this.view.dispatch({
        selection: P.create(
          [
            P.range(l + a.deviationStart, i),
            P.cursor(i)
          ],
          1
        )
      });
    }
    this.view.focus();
  }
  /**
   * 设置tabSize
   *
   * @param tabSize 需要切换的大小
   */
  setTabSize(o) {
    this.toggleTabSize([
      se.tabSize.of(o),
      Ht.of(" ".repeat(o))
    ]);
  }
  /**
   * 设置placeholder
   *
   * @param t 目标内容
   */
  setPlaceholder(o) {
    this.togglePlaceholder(wt(o));
  }
  focus(o) {
    if (this.view.focus(), !o)
      return;
    let a = 0, l = 0, i = 0;
    switch (o) {
      case "start":
        break;
      case "end": {
        a = l = i = this.getValue().length;
        break;
      }
      default:
        a = o.rangeAnchor || o.cursorPos, l = o.rangeHead || o.cursorPos, i = o.cursorPos;
    }
    this.view.dispatch({
      scrollIntoView: !0,
      selection: P.create(
        [P.range(a, l), P.cursor(i)],
        1
      )
    });
  }
  setDisabled(o) {
    this.toggleDisabled([ge.editable.of(!o)]);
  }
  setReadOnly(o) {
    this.toggleReadOnly([se.readOnly.of(o)]);
  }
  setMaxLength(o) {
    this.toggleMaxlength([
      se.changeFilter.of((a) => a.newDoc.length <= o)
    ]);
  }
}
const Ml = (e) => {
  const o = S("editorId");
  return (l) => {
    if (l.clipboardData) {
      if (l.clipboardData.files.length > 0) {
        const { files: i } = l.clipboardData;
        h.emit(
          o,
          "uploadImage",
          Array.from(i).filter((r) => /image\/.*/.test(r.type))
        ), l.preventDefault();
      }
      if (e.autoDetectCode && l.clipboardData.types.includes("vscode-editor-data")) {
        const i = JSON.parse(l.clipboardData.getData("vscode-editor-data"));
        h.emit(o, "replace", "code", {
          mode: i.mode,
          text: l.clipboardData.getData("text/plain")
        }), l.preventDefault();
      }
    }
  };
}, Ll = Ml, Dl = (e) => {
  const o = S("editorId");
  z(() => {
    h.on(o, {
      name: dt,
      callback(a) {
        var l;
        (l = e.value) == null || l.focus(a);
      }
    });
  });
}, El = Dl, Hl = (e, o) => [
  {
    key: "Ctrl-b",
    mac: "Cmd-b",
    run: () => (h.emit(e, "replace", "bold"), !0)
  },
  {
    key: "Ctrl-d",
    mac: "Cmd-d",
    run: Mt,
    preventDefault: !0
  },
  {
    key: "Ctrl-s",
    mac: "Cmd-s",
    run: (M) => (h.emit(e, je, M.state.doc.toString()), !0),
    shift: () => (h.emit(e, "replace", "strikeThrough"), !0)
  },
  {
    key: "Ctrl-u",
    mac: "Cmd-u",
    run: () => (h.emit(e, "replace", "underline"), !0),
    shift: () => (h.emit(e, "replace", "unorderedList"), !0)
  },
  {
    key: "Ctrl-i",
    mac: "Cmd-i",
    run: () => (h.emit(e, "replace", "italic"), !0),
    shift: () => (h.emit(e, "openModals", "image"), !0)
  },
  {
    key: "Ctrl-1",
    mac: "Cmd-1",
    run: () => (h.emit(e, "replace", "h1"), !0)
  },
  {
    key: "Ctrl-2",
    mac: "Cmd-2",
    run: () => (h.emit(e, "replace", "h2"), !0)
  },
  {
    key: "Ctrl-3",
    mac: "Cmd-3",
    run: () => (h.emit(e, "replace", "h3"), !0)
  },
  {
    key: "Ctrl-4",
    mac: "Cmd-4",
    run: () => (h.emit(e, "replace", "h4"), !0)
  },
  {
    key: "Ctrl-5",
    mac: "Cmd-5",
    run: () => (h.emit(e, "replace", "h5"), !0)
  },
  {
    key: "Ctrl-6",
    mac: "Cmd-6",
    run: () => (h.emit(e, "replace", "h6"), !0)
  },
  {
    key: "Ctrl-ArrowUp",
    mac: "Cmd-ArrowUp",
    run: () => (h.emit(e, "replace", "sup"), !0)
  },
  {
    key: "Ctrl-ArrowDown",
    mac: "Cmd-ArrowDown",
    run: () => (h.emit(e, "replace", "sub"), !0)
  },
  {
    key: "Ctrl-o",
    mac: "Cmd-o",
    run: () => (h.emit(e, "replace", "orderedList"), !0)
  },
  {
    key: "Ctrl-c",
    mac: "Cmd-c",
    shift: () => (h.emit(e, "replace", "code"), !0),
    any(M, C) {
      return (C.ctrlKey || C.metaKey) && C.altKey && C.code === "KeyC" ? (h.emit(e, "replace", "codeRow"), !0) : !1;
    }
  },
  {
    key: "Ctrl-l",
    mac: "Cmd-l",
    run: () => (h.emit(e, "openModals", "link"), !0)
  },
  {
    key: "Ctrl-f",
    mac: "Cmd-f",
    shift: () => o.noPrettier ? !1 : (h.emit(e, "replace", "prettier"), !0)
  },
  {
    any: (M, C) => (C.ctrlKey || C.metaKey) && C.altKey && C.shiftKey && C.code === "KeyT" ? (h.emit(e, "replace", "table"), !0) : !1
  }
], Il = Hl, Bl = (e) => {
  const o = S("tabWidth"), a = S("editorId"), l = S("theme"), i = G(), r = Xe(), c = Il(a, e), m = Ll(e), f = [
    Tt.of([...c, Lt]),
    xt,
    At({ codeLanguages: St }),
    // 横向换行
    re.lineWrapping,
    re.updateListener.of((d) => {
      d.docChanged && e.onChange(d.state.doc.toString());
    }),
    re.domEventHandlers({
      paste: m,
      blur: e.onBlur,
      focus: e.onFocus
    })
  ], u = () => {
    const d = [
      ...f,
      l.value === "light" ? wl : ml,
      Sl(e.completions)
    ];
    return W.codeMirrorExtensions(l.value, d, [
      ...c
    ]);
  };
  return z(() => {
    const d = new re({
      doc: e.value,
      parent: i.value
    }), v = new Al(d);
    r.value = v, setTimeout(() => {
      v.setTabSize(o), v.setDisabled(e.disabled), v.setReadOnly(e.readonly), v.setExtensions(u()), e.placeholder && v.setPlaceholder(e.placeholder), typeof e.maxlength == "number" && v.setMaxLength(e.maxlength), e.autofocus && d.focus();
    }, 0), h.on(a, {
      name: "ctrlZ",
      callback() {
        Dt(d);
      }
    }), h.on(a, {
      name: "ctrlShiftZ",
      callback() {
        Et(d);
      }
    }), h.on(a, {
      name: "replace",
      callback(y, b = {}) {
        var k;
        const { text: p, options: g } = el(y, r.value, b);
        (k = r.value) == null || k.replaceSelectedText(p, g);
      }
    });
  }), F(
    [l, te(e, "completions")],
    () => {
      var d;
      (d = r.value) == null || d.setExtensions(u());
    },
    {
      deep: !0
    }
  ), F(
    () => e.value,
    () => {
      var d, v;
      ((d = r.value) == null ? void 0 : d.getValue()) !== e.value && ((v = r.value) == null || v.setValue(e.value));
    }
  ), F(
    () => e.placeholder,
    () => {
      var d;
      (d = r.value) == null || d.setPlaceholder(e.placeholder);
    }
  ), F(
    () => e.disabled,
    () => {
      var d;
      (d = r.value) == null || d.setDisabled(e.disabled);
    }
  ), F(
    () => e.readonly,
    () => {
      var d;
      (d = r.value) == null || d.setDisabled(e.readonly);
    }
  ), F(
    () => e.maxlength,
    () => {
      var d;
      e.maxlength && ((d = r.value) == null || d.setMaxLength(e.maxlength));
    }
  ), El(r), {
    inputWrapperRef: i,
    codeMirrorUt: r
  };
}, Fl = Bl, Ol = {
  value: {
    type: String,
    default: ""
  },
  onChange: {
    type: Function,
    default: () => {
    }
  },
  setting: {
    type: Object,
    default: () => ({})
  },
  onHtmlChanged: {
    type: Function,
    default: () => {
    }
  },
  onGetCatalog: {
    type: Function,
    default: () => {
    }
  },
  mdHeadingId: {
    type: Function,
    default: () => ""
  },
  noMermaid: {
    type: Boolean,
    default: !1
  },
  sanitize: {
    type: Function,
    default: (e) => e
  },
  placeholder: {
    type: String,
    default: ""
  },
  // 不使用该函数功能
  noKatex: {
    type: Boolean,
    default: !1
  },
  scrollAuto: {
    type: Boolean
  },
  formatCopiedText: {
    type: Function,
    default: (e) => e
  },
  autofocus: {
    type: Boolean
  },
  disabled: {
    type: Boolean
  },
  readonly: {
    type: Boolean
  },
  maxlength: {
    type: Number
  },
  autoDetectCode: {
    type: Boolean
  },
  /**
   * 输入框失去焦点时触发事件
   */
  onBlur: {
    type: Function,
    default: () => {
    }
  },
  /**
   * 输入框获得焦点时触发事件
   */
  onFocus: {
    type: Function,
    default: () => {
    }
  },
  noPrettier: {
    type: Boolean
  },
  noHighlight: {
    type: Boolean,
    default: !1
  },
  completions: {
    type: Array
  },
  catalogVisible: {
    type: Boolean
  },
  theme: {
    type: String,
    default: "light"
  }
}, Vl = /* @__PURE__ */ O({
  name: "MDEditorContent",
  props: Ol,
  setup(e) {
    const o = S("editorId"), a = G(""), {
      inputWrapperRef: l,
      codeMirrorUt: i
    } = Fl(e);
    return Qt(e, a, i), () => t("div", {
      class: `${n}-content`
    }, [t("div", {
      class: `${n}-input-wrapper`,
      ref: l
    }, null), t(ut, {
      modelValue: e.value,
      setting: e.setting,
      onHtmlChanged: (r) => {
        a.value = r, e.onHtmlChanged(r);
      },
      onGetCatalog: e.onGetCatalog,
      mdHeadingId: e.mdHeadingId,
      noMermaid: e.noMermaid,
      sanitize: e.sanitize,
      noKatex: e.noKatex,
      formatCopiedText: e.formatCopiedText,
      noHighlight: e.noHighlight
    }, null), e.catalogVisible && t(Ye, {
      theme: e.theme,
      class: `${n}-catalog-editor`,
      editorId: o,
      mdHeadingId: e.mdHeadingId,
      key: "internal-catalog"
    }, null)]);
  }
}), Rl = /* @__PURE__ */ O({
  props: {
    modelValue: {
      type: String,
      default: ""
    }
  },
  setup(e) {
    const o = S("usedLanguageText");
    return () => {
      var a, l;
      return t("div", {
        class: `${n}-footer-item`
      }, [t("label", {
        class: `${n}-footer-label`
      }, [`${(a = o.value.footer) == null ? void 0 : a.markdownTotal}:`]), t("span", null, [((l = e.modelValue) == null ? void 0 : l.length) || 0])]);
    };
  }
}), Pl = {
  checked: {
    type: Boolean,
    default: !1
  },
  onChange: {
    type: Function,
    default: () => {
    }
  }
}, Nl = /* @__PURE__ */ O({
  props: Pl,
  setup(e) {
    return () => t("div", {
      class: [`${n}-checkbox`, e.checked && `${n}-checkbox-checked`],
      onClick: () => {
        e.onChange(!e.checked);
      }
    }, null);
  }
}), ql = {
  scrollAuto: {
    type: Boolean
  },
  onScrollAutoChange: {
    type: Function,
    default: () => {
    }
  }
}, Ul = /* @__PURE__ */ O({
  props: ql,
  setup(e) {
    const o = S("usedLanguageText");
    return () => {
      var a;
      return t("div", {
        class: `${n}-footer-item`
      }, [t("label", {
        class: `${n}-footer-label`,
        onClick: () => {
          e.onScrollAutoChange(!e.scrollAuto);
        }
      }, [(a = o.value.footer) == null ? void 0 : a.scrollAuto]), t(Nl, {
        checked: e.scrollAuto,
        onChange: e.onScrollAutoChange
      }, null)]);
    };
  }
}), Gl = {
  modelValue: {
    type: String,
    default: ""
  },
  footers: {
    type: Array,
    default: []
  },
  scrollAuto: {
    type: Boolean
  },
  onScrollAutoChange: {
    type: Function,
    default: () => {
    }
  },
  defFooters: {
    type: Object
  }
}, Kl = /* @__PURE__ */ O({
  name: "MDEditorFooter",
  props: Gl,
  setup(e) {
    const o = fe(() => {
      const l = e.footers.indexOf("="), i = l === -1 ? e.footers : e.footers.slice(0, l), r = l === -1 ? [] : e.footers.slice(l, Number.MAX_SAFE_INTEGER);
      return [i, r];
    }), a = (l) => {
      if (lt.includes(l))
        switch (l) {
          case "markdownTotal":
            return t(Rl, {
              modelValue: e.modelValue
            }, null);
          case "scrollSwitch":
            return t(Ul, {
              scrollAuto: e.scrollAuto,
              onScrollAutoChange: e.onScrollAutoChange
            }, null);
        }
      else
        return e.defFooters instanceof Array ? e.defFooters[l] || "" : e.defFooters && e.defFooters.children instanceof Array && e.defFooters.children[l] || "";
    };
    return () => {
      const l = o.value[0].map((r) => a(r)), i = o.value[1].map((r) => a(r));
      return t("div", {
        class: `${n}-footer`
      }, [t("div", {
        class: `${n}-footer-left`
      }, [l]), t("div", {
        class: `${n}-footer-right`
      }, [i])]);
    };
  }
}), jl = /* @__PURE__ */ O({
  name: "MdEditorV3",
  props: mt,
  emits: ft,
  setup(e, o) {
    const {
      editorId: a,
      noKatex: l,
      noMermaid: i,
      noPrettier: r,
      noUploadImg: c,
      noHighlight: m
    } = e, f = Z({
      scrollAuto: e.scrollAuto
    });
    gt(e, o), ht(e), bt(e);
    const [u, d] = vt(e, o), v = pt(e);
    return Qe(() => {
      h.clear(a);
    }), kt(e, o, v, u, d), () => {
      var p;
      const y = He({
        props: e,
        ctx: o
      }, "defToolbars"), b = He({
        props: e,
        ctx: o
      }, "defFooters");
      return t("div", {
        id: a,
        class: [n, e.class, e.theme === "dark" && `${n}-dark`, u.fullscreen || u.pageFullscreen ? `${n}-fullscreen` : ""],
        style: e.style
      }, [t(Yt, {
        noPrettier: r,
        toolbars: e.toolbars,
        toolbarsExclude: e.toolbarsExclude,
        setting: u,
        updateSetting: d,
        tableShape: e.tableShape,
        defToolbars: y,
        noUploadImg: c
      }, null), t(Vl, {
        value: e.modelValue,
        setting: u,
        mdHeadingId: e.mdHeadingId,
        noMermaid: i,
        noPrettier: r,
        sanitize: e.sanitize,
        placeholder: e.placeholder,
        noKatex: l,
        scrollAuto: f.scrollAuto,
        formatCopiedText: e.formatCopiedText,
        autofocus: e.autoFocus,
        disabled: e.disabled,
        readonly: e.readOnly,
        maxlength: e.maxLength,
        autoDetectCode: e.autoDetectCode,
        noHighlight: m,
        onChange: (g) => {
          e.onChange ? e.onChange(g) : (o.emit("update:modelValue", g), o.emit("onChange", g));
        },
        onHtmlChanged: (g) => {
          e.onHtmlChanged ? e.onHtmlChanged(g) : o.emit("onHtmlChanged", g);
        },
        onGetCatalog: (g) => {
          e.onGetCatalog ? e.onGetCatalog(g) : o.emit("onGetCatalog", g);
        },
        onBlur: (g) => {
          e.onBlur ? e.onBlur(g) : o.emit("onBlur", g);
        },
        onFocus: (g) => {
          e.onFocus ? e.onFocus(g) : o.emit("onFocus", g);
        },
        completions: e.completions,
        catalogVisible: v.value,
        theme: e.theme
      }, null), ((p = e.footers) == null ? void 0 : p.length) > 0 && t(Kl, {
        modelValue: e.modelValue,
        footers: e.footers,
        defFooters: b,
        scrollAuto: f.scrollAuto,
        onScrollAutoChange: (g) => f.scrollAuto = g
      }, null)]);
    };
  }
}), ue = jl;
ue.install = (e) => (e.component(ue.name, ue), e.use(Ot).use(ot).use(yt).use(Ye).use(Ct), e);
export {
  ue as default
};
