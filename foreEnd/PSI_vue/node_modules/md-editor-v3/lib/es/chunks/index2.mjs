import { defineComponent as H, reactive as E, ref as C, watch as T, onMounted as D, onBeforeUnmount as $, cloneVNode as O, createVNode as c, inject as j } from "vue";
import { p as g } from "./config.mjs";
import { g as d } from "./vue-tsx.mjs";
const B = {
  overlay: {
    type: [String, Object],
    default: ""
  },
  visible: {
    type: Boolean,
    default: !1
  },
  onChange: {
    type: Function,
    default: () => {
    }
  },
  // 相对滚动的元素选择器
  relative: {
    type: String,
    default: "html"
  }
}, I = /* @__PURE__ */ H({
  props: B,
  setup(e, a) {
    const i = `${g}-dropdown-hidden`, t = E({
      overlayClass: [i],
      overlayStyle: {},
      triggerHover: !1,
      overlayHover: !1
    }), r = C(), n = C(), y = () => {
      var p;
      t.triggerHover = !0;
      const o = r.value, l = n.value;
      if (!o || !l)
        return;
      const v = o.getBoundingClientRect(), u = o.offsetTop, L = o.offsetLeft, S = v.height, b = v.width, w = ((p = document.querySelector(e.relative)) == null ? void 0 : p.scrollLeft) || 0;
      t.overlayStyle = {
        ...t.overlayStyle,
        top: u + S + "px",
        left: L - l.offsetWidth / 2 + b / 2 - w + "px"
      }, e.onChange(!0);
    }, m = () => {
      t.overlayHover = !0;
    };
    T(() => e.visible, (o) => {
      o ? t.overlayClass = t.overlayClass.filter((l) => l !== i) : t.overlayClass.push(i);
    });
    let h = -1;
    const s = (o) => {
      r.value === o.target ? t.triggerHover = !1 : t.overlayHover = !1, clearTimeout(h), h = window.setTimeout(() => {
        !t.overlayHover && !t.triggerHover && e.onChange(!1);
      }, 10);
    };
    return D(() => {
      r.value.addEventListener("mouseenter", y), r.value.addEventListener("mouseleave", s), n.value.addEventListener("mouseenter", m), n.value.addEventListener("mouseleave", s);
    }), $(() => {
      r.value.removeEventListener("mouseenter", y), r.value.removeEventListener("mouseleave", s), n.value.removeEventListener("mouseenter", m), n.value.removeEventListener("mouseleave", s);
    }), () => {
      const o = d({
        ctx: a
      }), l = d({
        props: e,
        ctx: a
      }, "overlay"), v = O(o instanceof Array ? o[0] : o, {
        ref: r
      }), u = c("div", {
        class: [`${g}-dropdown`, t.overlayClass],
        style: t.overlayStyle,
        ref: n
      }, [c("div", {
        class: `${g}-dropdown-overlay`
      }, [l instanceof Array ? l[0] : l])]);
      return [v, u];
    };
  }
}), A = {
  title: {
    type: String,
    default: ""
  },
  visible: {
    type: Boolean
  },
  // 展示在工具栏的内容，通常是个图标
  trigger: {
    type: [String, Object]
  },
  onChange: {
    type: Function
  },
  // 下拉框中的内容
  overlay: {
    type: [String, Object]
  }
}, f = /* @__PURE__ */ H({
  name: "DropdownToolbar",
  props: A,
  emits: ["onChange"],
  setup(e, a) {
    const i = j("editorId");
    return () => {
      const t = d({
        props: e,
        ctx: a
      }, "trigger"), r = d({
        props: e,
        ctx: a
      }, "overlay");
      return c(I, {
        relative: `#${i}-toolbar-wrapper`,
        visible: e.visible,
        onChange: (n) => {
          e.onChange instanceof Function ? e.onChange(n) : a.emit("onChange", n);
        },
        overlay: r
      }, {
        default: () => [c("div", {
          class: `${g}-toolbar-item`,
          title: e.title || ""
        }, [t])]
      });
    };
  }
});
f.install = (e) => (e.component(f.name, f), e);
export {
  f as D,
  I as a
};
