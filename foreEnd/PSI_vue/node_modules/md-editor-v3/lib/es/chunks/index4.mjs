var a = Object.defineProperty;
var c = (o, t, s) => t in o ? a(o, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : o[t] = s;
var p = (o, t, s) => (c(o, typeof t != "symbol" ? t + "" : t, s), s);
class u {
  constructor() {
    // 事件池
    p(this, "pools", {});
  }
  // 移除事件监听
  remove(t, s, n) {
    const i = this.pools[t] && this.pools[t][s];
    i && (this.pools[t][s] = i.filter((r) => r !== n));
  }
  // 清空全部事件，由于单一实例，多次注册会被共享内容
  clear(t) {
    this.pools[t] = {};
  }
  // 注册事件监听
  on(t, s) {
    return this.pools[t] || (this.pools[t] = {}), this.pools[t][s.name] || (this.pools[t][s.name] = []), this.pools[t][s.name].push(s.callback), this.pools[t][s.name].includes(s.callback);
  }
  // 触发事件
  emit(t, s, ...n) {
    this.pools[t] || (this.pools[t] = {});
    const i = this.pools[t][s];
    i && i.forEach((r) => {
      try {
        r(...n);
      } catch (l) {
        console.error(`${s} monitor event exception！`, l);
      }
    });
  }
}
const g = new u(), f = (o, t = "image.png") => {
  const s = o.split(","), n = s[0].match(/:(.*?);/);
  if (n) {
    const e = n[1], i = atob(s[1]);
    let r = i.length;
    const l = new Uint8Array(r);
    for (; r--; )
      l[r] = i.charCodeAt(r);
    return new File([l], t, { type: e });
  }
  return null;
}, b = (o) => {
  if (!o)
    return o;
  const t = o.split(`
`), s = ['<span rn-wrapper aria-hidden="true">'];
  return t.forEach(() => {
    s.push("<span></span>");
  }), s.push("</span>"), `<span class="code-block">${o}</span>${s.join("")}`;
}, R = (o, t) => {
  if (!o || !t)
    return 0;
  const s = o == null ? void 0 : o.getBoundingClientRect();
  if (t === document.documentElement)
    return s.top - t.clientTop;
  const n = t == null ? void 0 : t.getBoundingClientRect();
  return s.top - n.top;
}, m = () => `${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`;
export {
  f as a,
  g as b,
  R as c,
  b as g,
  m as u
};
