import { defineComponent as C, ref as r, reactive as b, computed as P, onMounted as w, onBeforeUnmount as A, watch as v, nextTick as S, createVNode as t, Fragment as $, isVNode as x } from "vue";
import { p as n } from "./config.mjs";
import { g as h } from "./vue-tsx.mjs";
import { k as y } from "./dom.mjs";
const T = {
  title: {
    type: String,
    default: ""
  },
  visible: {
    type: Boolean,
    default: !1
  },
  width: {
    type: String,
    default: "auto"
  },
  height: {
    type: String,
    default: "auto"
  },
  onClose: {
    type: Function,
    default: () => {
    }
  },
  showAdjust: {
    type: Boolean,
    default: !1
  },
  isFullscreen: {
    type: Boolean,
    default: !1
  },
  onAdjust: {
    type: Function,
    default: () => {
    }
  },
  class: {
    type: String
  }
}, B = /* @__PURE__ */ C({
  props: T,
  setup(e, a) {
    const c = r(e.visible), o = r([`${n}-modal`]), d = r(), m = r();
    let f = () => {
    };
    const l = b({
      initPos: {
        left: "0px",
        top: "0px"
      },
      historyPos: {
        left: "0px",
        top: "0px"
      }
    }), j = P(() => e.isFullscreen ? {
      width: "100%",
      height: "100%"
    } : {
      width: e.width,
      height: e.height
    });
    return w(() => {
      f = y(m.value, (s, i) => {
        l.initPos.left = s + "px", l.initPos.top = i + "px";
      });
    }), A(() => {
      f();
    }), v(() => e.isFullscreen, (s) => {
      s ? f() : f = y(m.value, (i, u) => {
        l.initPos.left = i + "px", l.initPos.top = u + "px";
      });
    }), v(() => e.visible, (s) => {
      s ? (o.value.push("zoom-in"), c.value = s, S(() => {
        const i = d.value.offsetWidth / 2, u = d.value.offsetHeight / 2, F = document.documentElement.clientWidth / 2, k = document.documentElement.clientHeight / 2;
        l.initPos.left = F - i + "px", l.initPos.top = k - u + "px";
      }), setTimeout(() => {
        o.value = o.value.filter((i) => i !== "zoom-in");
      }, 140)) : (o.value.push("zoom-out"), setTimeout(() => {
        o.value = o.value.filter((i) => i !== "zoom-out"), c.value = s;
      }, 130));
    }), () => {
      const s = h({
        ctx: a
      }), i = h({
        props: e,
        ctx: a
      }, "title");
      return t("div", {
        class: [e.class],
        style: {
          display: c.value ? "block" : "none"
        }
      }, [t("div", {
        class: `${n}-modal-mask`,
        onClick: e.onClose
      }, null), t("div", {
        class: o.value,
        style: {
          ...l.initPos,
          ...j.value
        },
        ref: d
      }, [t("div", {
        class: `${n}-modal-header`,
        ref: m
      }, [i || ""]), t("div", {
        class: `${n}-modal-body`
      }, [s]), t("div", {
        class: `${n}-modal-func`
      }, [e.showAdjust && t("div", {
        class: `${n}-modal-adjust`,
        onClick: (u) => {
          u.stopPropagation(), e.isFullscreen ? l.initPos = l.historyPos : (l.historyPos = l.initPos, l.initPos = {
            left: "0",
            top: "0"
          }), e.onAdjust(!e.isFullscreen);
        }
      }, [t("svg", {
        class: `${n}-icon`,
        "aria-hidden": "true"
      }, [t("use", {
        "xlink:href": `#md-editor-icon-${e.isFullscreen ? "suoxiao" : "fangda"}`
      }, null)])]), t("div", {
        class: `${n}-modal-close`,
        onClick: (u) => {
          u.stopPropagation(), e.onClose && e.onClose();
        }
      }, [t("svg", {
        class: `${n}-icon`,
        "aria-hidden": "true"
      }, [t("use", {
        "xlink:href": "#md-editor-icon-close"
      }, null)])])])])]);
    };
  }
});
function M(e) {
  return typeof e == "function" || Object.prototype.toString.call(e) === "[object Object]" && !x(e);
}
const z = {
  title: {
    type: String,
    default: ""
  },
  modalTitle: {
    type: String,
    default: ""
  },
  visible: {
    type: Boolean
  },
  width: {
    type: String,
    default: "auto"
  },
  height: {
    type: String,
    default: "auto"
  },
  // 展示在工具栏的内容，通常是个图标
  trigger: {
    type: [String, Object]
  },
  onClick: {
    type: Function
  },
  onClose: {
    type: Function
  },
  /**
   * 显示全屏按钮
   */
  showAdjust: {
    type: Boolean,
    default: !1
  },
  isFullscreen: {
    type: Boolean,
    default: !1
  },
  onAdjust: {
    type: Function
  }
}, g = /* @__PURE__ */ C({
  name: "ModalToolbar",
  props: z,
  emits: ["onClick", "onClose", "onAdjust"],
  setup(e, a) {
    return () => {
      const c = h({
        props: e,
        ctx: a
      }, "trigger"), o = h({
        props: e,
        ctx: a
      }, "default");
      return t($, null, [t("div", {
        class: `${n}-toolbar-item`,
        title: e.title,
        onClick: () => {
          e.onClick instanceof Function ? e.onClick() : a.emit("onClick");
        }
      }, [c]), t(B, {
        width: e.width,
        height: e.height,
        title: e.modalTitle,
        visible: e.visible,
        onClose: () => {
          e.onClose instanceof Function ? e.onClose() : a.emit("onClose");
        },
        showAdjust: e.showAdjust,
        isFullscreen: e.isFullscreen,
        onAdjust: (d) => {
          e.onAdjust instanceof Function ? e.onAdjust(d) : a.emit("onAdjust", d);
        }
      }, M(o) ? o : {
        default: () => [o]
      })]);
    };
  }
});
g.install = (e) => (e.component(g.name, g), e);
export {
  g as M,
  B as a
};
