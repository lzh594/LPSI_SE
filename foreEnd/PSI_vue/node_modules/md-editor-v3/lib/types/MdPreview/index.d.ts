import { App } from 'vue';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            editorId: string;
            class: string;
            style: string | import("vue").CSSProperties;
            mdHeadingId: import("..").MdHeadingId;
            theme: import("..").Themes;
            modelValue: string;
            language: string;
            showCodeRowNumber: boolean;
            previewTheme: string;
            sanitize: (html: string) => string;
            noMermaid: boolean;
            noKatex: boolean;
            codeTheme: string;
            formatCopiedText: (text: string) => string;
            codeStyleReverse: boolean;
            codeStyleReverseList: string[];
            noHighlight: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            theme: {
                type: import("vue").PropType<import("..").Themes>;
                default: string;
            };
            class: {
                type: StringConstructor;
                default: string;
            };
            language: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onHtmlChanged: {
                type: import("vue").PropType<import("..").HtmlChangedEvent>;
            };
            onGetCatalog: {
                type: import("vue").PropType<import("..").GetCatalogEvent>;
            };
            editorId: {
                type: import("vue").PropType<string>;
                default: string;
            };
            showCodeRowNumber: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            previewTheme: {
                type: import("vue").PropType<string>;
                default: string;
            };
            style: {
                type: import("vue").PropType<string | import("vue").CSSProperties>;
                default: () => {};
            };
            mdHeadingId: {
                type: import("vue").PropType<import("..").MdHeadingId>;
                default: import("..").MdHeadingId;
            };
            sanitize: {
                type: import("vue").PropType<(html: string) => string>;
                default: (html: string) => string;
            };
            noMermaid: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            noKatex: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            codeTheme: {
                type: import("vue").PropType<string>;
                default: string;
            };
            noIconfont: {
                type: import("vue").PropType<boolean>;
            };
            formatCopiedText: {
                type: import("vue").PropType<(text: string) => string>;
                default: (text: string) => string;
            };
            codeStyleReverse: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            codeStyleReverseList: {
                type: import("vue").PropType<string[]>;
                default: string[];
            };
            noHighlight: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            onOnChange?: ((...args: any[]) => any) | undefined;
            onOnFocus?: ((...args: any[]) => any) | undefined;
            onOnBlur?: ((...args: any[]) => any) | undefined;
            onOnError?: ((...args: any[]) => any) | undefined;
            onOnSave?: ((...args: any[]) => any) | undefined;
            onOnUploadImg?: ((...args: any[]) => any) | undefined;
            onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
            onOnGetCatalog?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "editorId" | "class" | "style" | "mdHeadingId" | "theme" | "modelValue" | "language" | "showCodeRowNumber" | "previewTheme" | "sanitize" | "noMermaid" | "noKatex" | "codeTheme" | "formatCopiedText" | "codeStyleReverse" | "codeStyleReverseList" | "noHighlight">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "onChange" | "onFocus" | "onBlur" | "onError" | "onSave" | "onUploadImg" | "onHtmlChanged" | "onGetCatalog" | "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            theme: {
                type: import("vue").PropType<import("..").Themes>;
                default: string;
            };
            class: {
                type: StringConstructor;
                default: string;
            };
            language: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onHtmlChanged: {
                type: import("vue").PropType<import("..").HtmlChangedEvent>;
            };
            onGetCatalog: {
                type: import("vue").PropType<import("..").GetCatalogEvent>;
            };
            editorId: {
                type: import("vue").PropType<string>;
                default: string;
            };
            showCodeRowNumber: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            previewTheme: {
                type: import("vue").PropType<string>;
                default: string;
            };
            style: {
                type: import("vue").PropType<string | import("vue").CSSProperties>;
                default: () => {};
            };
            mdHeadingId: {
                type: import("vue").PropType<import("..").MdHeadingId>;
                default: import("..").MdHeadingId;
            };
            sanitize: {
                type: import("vue").PropType<(html: string) => string>;
                default: (html: string) => string;
            };
            noMermaid: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            noKatex: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            codeTheme: {
                type: import("vue").PropType<string>;
                default: string;
            };
            noIconfont: {
                type: import("vue").PropType<boolean>;
            };
            formatCopiedText: {
                type: import("vue").PropType<(text: string) => string>;
                default: (text: string) => string;
            };
            codeStyleReverse: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            codeStyleReverseList: {
                type: import("vue").PropType<string[]>;
                default: string[];
            };
            noHighlight: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            onOnChange?: ((...args: any[]) => any) | undefined;
            onOnFocus?: ((...args: any[]) => any) | undefined;
            onOnBlur?: ((...args: any[]) => any) | undefined;
            onOnError?: ((...args: any[]) => any) | undefined;
            onOnSave?: ((...args: any[]) => any) | undefined;
            onOnUploadImg?: ((...args: any[]) => any) | undefined;
            onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
            onOnGetCatalog?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("..").EditorEmits, string, {
            editorId: string;
            class: string;
            style: string | import("vue").CSSProperties;
            mdHeadingId: import("..").MdHeadingId;
            theme: import("..").Themes;
            modelValue: string;
            language: string;
            showCodeRowNumber: boolean;
            previewTheme: string;
            sanitize: (html: string) => string;
            noMermaid: boolean;
            noKatex: boolean;
            codeTheme: string;
            formatCopiedText: (text: string) => string;
            codeStyleReverse: boolean;
            codeStyleReverseList: string[];
            noHighlight: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: string;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<import("..").HtmlChangedEvent>;
        };
        onGetCatalog: {
            type: import("vue").PropType<import("..").GetCatalogEvent>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: string;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        mdHeadingId: {
            type: import("vue").PropType<import("..").MdHeadingId>;
            default: import("..").MdHeadingId;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noIconfont: {
            type: import("vue").PropType<boolean>;
        };
        formatCopiedText: {
            type: import("vue").PropType<(text: string) => string>;
            default: (text: string) => string;
        };
        codeStyleReverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeStyleReverseList: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        noHighlight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
        onOnFocus?: ((...args: any[]) => any) | undefined;
        onOnBlur?: ((...args: any[]) => any) | undefined;
        onOnError?: ((...args: any[]) => any) | undefined;
        onOnSave?: ((...args: any[]) => any) | undefined;
        onOnUploadImg?: ((...args: any[]) => any) | undefined;
        onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
        onOnGetCatalog?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    theme: {
        type: import("vue").PropType<import("..").Themes>;
        default: string;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    language: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: import("vue").PropType<import("..").HtmlChangedEvent>;
    };
    onGetCatalog: {
        type: import("vue").PropType<import("..").GetCatalogEvent>;
    };
    editorId: {
        type: import("vue").PropType<string>;
        default: string;
    };
    showCodeRowNumber: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    style: {
        type: import("vue").PropType<string | import("vue").CSSProperties>;
        default: () => {};
    };
    mdHeadingId: {
        type: import("vue").PropType<import("..").MdHeadingId>;
        default: import("..").MdHeadingId;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noIconfont: {
        type: import("vue").PropType<boolean>;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    codeStyleReverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeStyleReverseList: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    onOnChange?: ((...args: any[]) => any) | undefined;
    onOnFocus?: ((...args: any[]) => any) | undefined;
    onOnBlur?: ((...args: any[]) => any) | undefined;
    onOnError?: ((...args: any[]) => any) | undefined;
    onOnSave?: ((...args: any[]) => any) | undefined;
    onOnUploadImg?: ((...args: any[]) => any) | undefined;
    onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
    onOnGetCatalog?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("..").EditorEmits, "onChange" | "onFocus" | "onBlur" | "onError" | "onSave" | "onUploadImg" | "onHtmlChanged" | "onGetCatalog" | "update:modelValue", {
    editorId: string;
    class: string;
    style: string | import("vue").CSSProperties;
    mdHeadingId: import("..").MdHeadingId;
    theme: import("..").Themes;
    modelValue: string;
    language: string;
    showCodeRowNumber: boolean;
    previewTheme: string;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    codeTheme: string;
    formatCopiedText: (text: string) => string;
    codeStyleReverse: boolean;
    codeStyleReverseList: string[];
    noHighlight: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
