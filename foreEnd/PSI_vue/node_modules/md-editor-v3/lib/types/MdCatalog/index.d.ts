import { App } from 'vue';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            class: string;
            mdHeadingId: import("..").MdHeadingId;
            scrollElementOffsetTop: number;
            theme: import("..").Themes;
            offsetTop: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            editorId: {
                type: import("vue").PropType<string>;
            };
            class: {
                type: StringConstructor;
                default: string;
            };
            mdHeadingId: {
                type: import("vue").PropType<import("..").MdHeadingId>;
                default: (text: string) => string;
            };
            scrollElement: {
                type: import("vue").PropType<string | HTMLElement>;
            };
            theme: {
                type: import("vue").PropType<import("..").Themes>;
                default: string;
            };
            offsetTop: {
                type: import("vue").PropType<number>;
                default: number;
            };
            scrollElementOffsetTop: {
                type: import("vue").PropType<number>;
                default: number;
            };
            onClick: {
                type: import("vue").PropType<(e: MouseEvent, t: import("./MdCatalog").TocItem) => void>;
            };
        }>> & {
            onOnClick?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "class" | "mdHeadingId" | "scrollElementOffsetTop" | "theme" | "offsetTop">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "onClick", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            editorId: {
                type: import("vue").PropType<string>;
            };
            class: {
                type: StringConstructor;
                default: string;
            };
            mdHeadingId: {
                type: import("vue").PropType<import("..").MdHeadingId>;
                default: (text: string) => string;
            };
            scrollElement: {
                type: import("vue").PropType<string | HTMLElement>;
            };
            theme: {
                type: import("vue").PropType<import("..").Themes>;
                default: string;
            };
            offsetTop: {
                type: import("vue").PropType<number>;
                default: number;
            };
            scrollElementOffsetTop: {
                type: import("vue").PropType<number>;
                default: number;
            };
            onClick: {
                type: import("vue").PropType<(e: MouseEvent, t: import("./MdCatalog").TocItem) => void>;
            };
        }>> & {
            onOnClick?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "onClick"[], string, {
            class: string;
            mdHeadingId: import("..").MdHeadingId;
            scrollElementOffsetTop: number;
            theme: import("..").Themes;
            offsetTop: number;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        editorId: {
            type: import("vue").PropType<string>;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        mdHeadingId: {
            type: import("vue").PropType<import("..").MdHeadingId>;
            default: (text: string) => string;
        };
        scrollElement: {
            type: import("vue").PropType<string | HTMLElement>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: string;
        };
        offsetTop: {
            type: import("vue").PropType<number>;
            default: number;
        };
        scrollElementOffsetTop: {
            type: import("vue").PropType<number>;
            default: number;
        };
        onClick: {
            type: import("vue").PropType<(e: MouseEvent, t: import("./MdCatalog").TocItem) => void>;
        };
    }>> & {
        onOnClick?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    editorId: {
        type: import("vue").PropType<string>;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    mdHeadingId: {
        type: import("vue").PropType<import("..").MdHeadingId>;
        default: (text: string) => string;
    };
    scrollElement: {
        type: import("vue").PropType<string | HTMLElement>;
    };
    theme: {
        type: import("vue").PropType<import("..").Themes>;
        default: string;
    };
    offsetTop: {
        type: import("vue").PropType<number>;
        default: number;
    };
    scrollElementOffsetTop: {
        type: import("vue").PropType<number>;
        default: number;
    };
    onClick: {
        type: import("vue").PropType<(e: MouseEvent, t: import("./MdCatalog").TocItem) => void>;
    };
}>> & {
    onOnClick?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "onClick"[], "onClick", {
    class: string;
    mdHeadingId: import("..").MdHeadingId;
    scrollElementOffsetTop: number;
    theme: import("..").Themes;
    offsetTop: number;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
