import { ExtractPropTypes } from 'vue';
import { LooseRequired } from '@vue/shared';
import { contentPreviewProps } from './props';
export type ContentPreviewProps = Readonly<LooseRequired<Readonly<ExtractPropTypes<typeof contentPreviewProps>>>>;
declare const ContentPreview: import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    setting: {
        type: import("vue").PropType<import('../../type').SettingType>;
        default: () => {};
    };
    onHtmlChanged: {
        type: import("vue").PropType<(h: string) => void>;
        default: () => void;
    };
    onGetCatalog: {
        type: import("vue").PropType<(list: import('../../type').HeadList[]) => void>;
        default: () => void;
    };
    mdHeadingId: {
        type: import("vue").PropType<import('../../type').MdHeadingId>;
        default: () => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    setting: {
        type: import("vue").PropType<import('../../type').SettingType>;
        default: () => {};
    };
    onHtmlChanged: {
        type: import("vue").PropType<(h: string) => void>;
        default: () => void;
    };
    onGetCatalog: {
        type: import("vue").PropType<(list: import('../../type').HeadList[]) => void>;
        default: () => void;
    };
    mdHeadingId: {
        type: import("vue").PropType<import('../../type').MdHeadingId>;
        default: () => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
    };
}>>, {
    mdHeadingId: import('../../type').MdHeadingId;
    modelValue: string;
    onHtmlChanged: (h: string) => void;
    onGetCatalog: (list: import('../../type').HeadList[]) => void;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    formatCopiedText: (text: string) => string;
    noHighlight: boolean;
    setting: import('../../type').SettingType;
    previewOnly: boolean;
}, {}>;
export default ContentPreview;
