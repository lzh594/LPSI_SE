import { App } from 'vue';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            language?: string | undefined;
            theme?: import("./type").Themes | undefined;
            editorId?: string | undefined;
            class?: string | undefined;
            style?: string | import("vue").CSSProperties | undefined;
            mdHeadingId?: import("./type").MdHeadingId | undefined;
            preview?: boolean | undefined;
            pageFullscreen?: boolean | undefined;
            htmlPreview?: boolean | undefined;
            toolbars?: import("./type").ToolbarNames[] | undefined;
            toolbarsExclude?: import("./type").ToolbarNames[] | undefined;
            noPrettier?: boolean | undefined;
            tabWidth?: number | undefined;
            tableShape?: number[] | undefined;
            placeholder?: string | undefined;
            footers?: import("./type").Footers[] | undefined;
            scrollAuto?: boolean | undefined;
            showToolbarName?: boolean | undefined;
            inputBoxWitdh?: string | undefined;
            modelValue?: string | undefined;
            showCodeRowNumber?: boolean | undefined;
            previewTheme?: string | undefined;
            sanitize?: ((html: string) => string) | undefined;
            noMermaid?: boolean | undefined;
            noKatex?: boolean | undefined;
            codeTheme?: string | undefined;
            formatCopiedText?: ((text: string) => string) | undefined;
            codeStyleReverse?: boolean | undefined;
            codeStyleReverseList?: string[] | undefined;
            noHighlight?: boolean | undefined;
            noImgZoomIn?: boolean | undefined;
            customIcon?: import("./type").CustomIcon | undefined;
            readonly onChange?: import("./type").ChangeEvent | undefined;
            onOnChange?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            key?: string | number | symbol | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            readonly onDrop?: ((event: DragEvent) => void) | undefined;
            readonly onFocus?: ((event: FocusEvent) => void) | undefined;
            readonly onBlur?: ((event: FocusEvent) => void) | undefined;
            readonly onInput?: ((event: Event) => void) | undefined;
            readonly onError?: import("./type").ErrorEvent | undefined;
            readonly onSave?: import("./type").SaveEvent | undefined;
            readonly onUploadImg?: import("./type").UploadImgEvent | undefined;
            readonly defToolbars?: string | JSX.Element | undefined;
            readonly defFooters?: string | JSX.Element | undefined;
            readonly noUploadImg?: boolean | undefined;
            readonly autoFocus?: boolean | undefined;
            readonly disabled?: boolean | undefined;
            readonly readOnly?: boolean | undefined;
            readonly maxLength?: number | undefined;
            readonly autoDetectCode?: boolean | undefined;
            readonly completions?: import("@codemirror/autocomplete").CompletionSource[] | undefined;
            readonly onInputBoxWitdhChange?: ((width: string) => void) | undefined;
            readonly onHtmlChanged?: import("./type").HtmlChangedEvent | undefined;
            readonly onGetCatalog?: import("./type").GetCatalogEvent | undefined;
            readonly noIconfont?: boolean | undefined;
            onOnDrop?: ((...args: any[]) => any) | undefined;
            onOnFocus?: ((...args: any[]) => any) | undefined;
            onOnBlur?: ((...args: any[]) => any) | undefined;
            onOnInput?: ((...args: any[]) => any) | undefined;
            onOnError?: ((...args: any[]) => any) | undefined;
            onOnSave?: ((...args: any[]) => any) | undefined;
            onOnUploadImg?: ((...args: any[]) => any) | undefined;
            onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
            onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
            onOnGetCatalog?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "onChange" | "onDrop" | "onFocus" | "onBlur" | "onInput" | "onError" | "onSave" | "onUploadImg" | "onInputBoxWitdhChange" | "onHtmlChanged" | "onGetCatalog" | "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            onChange: {
                type: import("vue").PropType<import("./type").ChangeEvent>;
            };
            onSave: {
                type: import("vue").PropType<import("./type").SaveEvent>;
            };
            onUploadImg: {
                type: import("vue").PropType<import("./type").UploadImgEvent>;
            };
            pageFullscreen: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            preview: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            htmlPreview: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            toolbars: {
                type: import("vue").PropType<import("./type").ToolbarNames[]>;
                default: string[];
            };
            toolbarsExclude: {
                type: import("vue").PropType<import("./type").ToolbarNames[]>;
                default: never[];
            };
            noPrettier: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            tabWidth: {
                type: import("vue").PropType<number>;
                default: number;
            };
            tableShape: {
                type: import("vue").PropType<number[]>;
                default: () => number[];
            };
            placeholder: {
                type: import("vue").PropType<string>;
                default: string;
            };
            defToolbars: {
                type: import("vue").PropType<string | JSX.Element>;
            };
            onError: {
                type: import("vue").PropType<import("./type").ErrorEvent>;
            };
            footers: {
                type: import("vue").PropType<import("./type").Footers[]>;
                default: import("./type").Footers[];
            };
            scrollAuto: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            defFooters: {
                type: import("vue").PropType<string | JSX.Element>;
            };
            noUploadImg: {
                type: import("vue").PropType<boolean>;
            };
            autoFocus: {
                type: import("vue").PropType<boolean>;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            };
            readOnly: {
                type: import("vue").PropType<boolean>;
            };
            maxLength: {
                type: import("vue").PropType<number>;
            };
            autoDetectCode: {
                type: import("vue").PropType<boolean>;
            };
            onBlur: {
                type: import("vue").PropType<(event: FocusEvent) => void>;
            };
            onFocus: {
                type: import("vue").PropType<(event: FocusEvent) => void>;
            };
            completions: {
                type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
            };
            showToolbarName: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onInput: {
                type: import("vue").PropType<(event: Event) => void>;
            };
            onDrop: {
                type: import("vue").PropType<(event: DragEvent) => void>;
            };
            inputBoxWitdh: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onInputBoxWitdhChange: {
                type: import("vue").PropType<(width: string) => void>;
            };
            modelValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            theme: {
                type: import("vue").PropType<import("./type").Themes>;
                default: string;
            };
            class: {
                type: StringConstructor;
                default: string;
            };
            language: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onHtmlChanged: {
                type: import("vue").PropType<import("./type").HtmlChangedEvent>;
            };
            onGetCatalog: {
                type: import("vue").PropType<import("./type").GetCatalogEvent>;
            };
            editorId: {
                type: import("vue").PropType<string>;
                default: string;
            };
            showCodeRowNumber: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            previewTheme: {
                type: import("vue").PropType<string>;
                default: string;
            };
            style: {
                type: import("vue").PropType<string | import("vue").CSSProperties>;
                default: () => {};
            };
            mdHeadingId: {
                type: import("vue").PropType<import("./type").MdHeadingId>;
                default: import("./type").MdHeadingId;
            };
            sanitize: {
                type: import("vue").PropType<(html: string) => string>;
                default: (html: string) => string;
            };
            noMermaid: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            noKatex: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            codeTheme: {
                type: import("vue").PropType<string>;
                default: string;
            };
            noIconfont: {
                type: import("vue").PropType<boolean>;
            };
            formatCopiedText: {
                type: import("vue").PropType<(text: string) => string>;
                default: (text: string) => string;
            };
            codeStyleReverse: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            codeStyleReverseList: {
                type: import("vue").PropType<string[]>;
                default: string[];
            };
            noHighlight: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            noImgZoomIn: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            customIcon: {
                type: import("vue").PropType<import("./type").CustomIcon>;
                default: {};
            };
        }>> & {
            onOnChange?: ((...args: any[]) => any) | undefined;
            onOnDrop?: ((...args: any[]) => any) | undefined;
            onOnFocus?: ((...args: any[]) => any) | undefined;
            onOnBlur?: ((...args: any[]) => any) | undefined;
            onOnInput?: ((...args: any[]) => any) | undefined;
            onOnError?: ((...args: any[]) => any) | undefined;
            onOnSave?: ((...args: any[]) => any) | undefined;
            onOnUploadImg?: ((...args: any[]) => any) | undefined;
            onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
            onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
            onOnGetCatalog?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("./type").EditorEmits, string, {
            language: string;
            theme: import("./type").Themes;
            editorId: string;
            class: string;
            style: string | import("vue").CSSProperties;
            mdHeadingId: import("./type").MdHeadingId;
            preview: boolean;
            pageFullscreen: boolean;
            htmlPreview: boolean;
            toolbars: import("./type").ToolbarNames[];
            toolbarsExclude: import("./type").ToolbarNames[];
            noPrettier: boolean;
            tabWidth: number;
            tableShape: number[];
            placeholder: string;
            footers: import("./type").Footers[];
            scrollAuto: boolean;
            showToolbarName: boolean;
            inputBoxWitdh: string;
            modelValue: string;
            showCodeRowNumber: boolean;
            previewTheme: string;
            sanitize: (html: string) => string;
            noMermaid: boolean;
            noKatex: boolean;
            codeTheme: string;
            formatCopiedText: (text: string) => string;
            codeStyleReverse: boolean;
            codeStyleReverseList: string[];
            noHighlight: boolean;
            noImgZoomIn: boolean;
            customIcon: import("./type").CustomIcon;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        onChange: {
            type: import("vue").PropType<import("./type").ChangeEvent>;
        };
        onSave: {
            type: import("vue").PropType<import("./type").SaveEvent>;
        };
        onUploadImg: {
            type: import("vue").PropType<import("./type").UploadImgEvent>;
        };
        pageFullscreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        htmlPreview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        toolbars: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: string[];
        };
        toolbarsExclude: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: never[];
        };
        noPrettier: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        tabWidth: {
            type: import("vue").PropType<number>;
            default: number;
        };
        tableShape: {
            type: import("vue").PropType<number[]>;
            default: () => number[];
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defToolbars: {
            type: import("vue").PropType<string | JSX.Element>;
        };
        onError: {
            type: import("vue").PropType<import("./type").ErrorEvent>;
        };
        footers: {
            type: import("vue").PropType<import("./type").Footers[]>;
            default: import("./type").Footers[];
        };
        scrollAuto: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        defFooters: {
            type: import("vue").PropType<string | JSX.Element>;
        };
        noUploadImg: {
            type: import("vue").PropType<boolean>;
        };
        autoFocus: {
            type: import("vue").PropType<boolean>;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        };
        readOnly: {
            type: import("vue").PropType<boolean>;
        };
        maxLength: {
            type: import("vue").PropType<number>;
        };
        autoDetectCode: {
            type: import("vue").PropType<boolean>;
        };
        onBlur: {
            type: import("vue").PropType<(event: FocusEvent) => void>;
        };
        onFocus: {
            type: import("vue").PropType<(event: FocusEvent) => void>;
        };
        completions: {
            type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
        };
        showToolbarName: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onInput: {
            type: import("vue").PropType<(event: Event) => void>;
        };
        onDrop: {
            type: import("vue").PropType<(event: DragEvent) => void>;
        };
        inputBoxWitdh: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onInputBoxWitdhChange: {
            type: import("vue").PropType<(width: string) => void>;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        theme: {
            type: import("vue").PropType<import("./type").Themes>;
            default: string;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<import("./type").HtmlChangedEvent>;
        };
        onGetCatalog: {
            type: import("vue").PropType<import("./type").GetCatalogEvent>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: string;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        mdHeadingId: {
            type: import("vue").PropType<import("./type").MdHeadingId>;
            default: import("./type").MdHeadingId;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noIconfont: {
            type: import("vue").PropType<boolean>;
        };
        formatCopiedText: {
            type: import("vue").PropType<(text: string) => string>;
            default: (text: string) => string;
        };
        codeStyleReverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeStyleReverseList: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        noHighlight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noImgZoomIn: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        customIcon: {
            type: import("vue").PropType<import("./type").CustomIcon>;
            default: {};
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
        onOnDrop?: ((...args: any[]) => any) | undefined;
        onOnFocus?: ((...args: any[]) => any) | undefined;
        onOnBlur?: ((...args: any[]) => any) | undefined;
        onOnInput?: ((...args: any[]) => any) | undefined;
        onOnError?: ((...args: any[]) => any) | undefined;
        onOnSave?: ((...args: any[]) => any) | undefined;
        onOnUploadImg?: ((...args: any[]) => any) | undefined;
        onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
        onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
        onOnGetCatalog?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    onChange: {
        type: import("vue").PropType<import("./type").ChangeEvent>;
    };
    onSave: {
        type: import("vue").PropType<import("./type").SaveEvent>;
    };
    onUploadImg: {
        type: import("vue").PropType<import("./type").UploadImgEvent>;
    };
    pageFullscreen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    preview: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    htmlPreview: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    toolbars: {
        type: import("vue").PropType<import("./type").ToolbarNames[]>;
        default: string[];
    };
    toolbarsExclude: {
        type: import("vue").PropType<import("./type").ToolbarNames[]>;
        default: never[];
    };
    noPrettier: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    tabWidth: {
        type: import("vue").PropType<number>;
        default: number;
    };
    tableShape: {
        type: import("vue").PropType<number[]>;
        default: () => number[];
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defToolbars: {
        type: import("vue").PropType<string | JSX.Element>;
    };
    onError: {
        type: import("vue").PropType<import("./type").ErrorEvent>;
    };
    footers: {
        type: import("vue").PropType<import("./type").Footers[]>;
        default: import("./type").Footers[];
    };
    scrollAuto: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    defFooters: {
        type: import("vue").PropType<string | JSX.Element>;
    };
    noUploadImg: {
        type: import("vue").PropType<boolean>;
    };
    autoFocus: {
        type: import("vue").PropType<boolean>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    readOnly: {
        type: import("vue").PropType<boolean>;
    };
    maxLength: {
        type: import("vue").PropType<number>;
    };
    autoDetectCode: {
        type: import("vue").PropType<boolean>;
    };
    onBlur: {
        type: import("vue").PropType<(event: FocusEvent) => void>;
    };
    onFocus: {
        type: import("vue").PropType<(event: FocusEvent) => void>;
    };
    completions: {
        type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
    };
    showToolbarName: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onInput: {
        type: import("vue").PropType<(event: Event) => void>;
    };
    onDrop: {
        type: import("vue").PropType<(event: DragEvent) => void>;
    };
    inputBoxWitdh: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onInputBoxWitdhChange: {
        type: import("vue").PropType<(width: string) => void>;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    theme: {
        type: import("vue").PropType<import("./type").Themes>;
        default: string;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    language: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: import("vue").PropType<import("./type").HtmlChangedEvent>;
    };
    onGetCatalog: {
        type: import("vue").PropType<import("./type").GetCatalogEvent>;
    };
    editorId: {
        type: import("vue").PropType<string>;
        default: string;
    };
    showCodeRowNumber: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    style: {
        type: import("vue").PropType<string | import("vue").CSSProperties>;
        default: () => {};
    };
    mdHeadingId: {
        type: import("vue").PropType<import("./type").MdHeadingId>;
        default: import("./type").MdHeadingId;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noIconfont: {
        type: import("vue").PropType<boolean>;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    codeStyleReverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeStyleReverseList: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    customIcon: {
        type: import("vue").PropType<import("./type").CustomIcon>;
        default: {};
    };
}>> & {
    onOnChange?: ((...args: any[]) => any) | undefined;
    onOnDrop?: ((...args: any[]) => any) | undefined;
    onOnFocus?: ((...args: any[]) => any) | undefined;
    onOnBlur?: ((...args: any[]) => any) | undefined;
    onOnInput?: ((...args: any[]) => any) | undefined;
    onOnError?: ((...args: any[]) => any) | undefined;
    onOnSave?: ((...args: any[]) => any) | undefined;
    onOnUploadImg?: ((...args: any[]) => any) | undefined;
    onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
    onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
    onOnGetCatalog?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("./type").EditorEmits, "onChange" | "onDrop" | "onFocus" | "onBlur" | "onInput" | "onError" | "onSave" | "onUploadImg" | "onInputBoxWitdhChange" | "onHtmlChanged" | "onGetCatalog" | "update:modelValue", {
    language: string;
    theme: import("./type").Themes;
    editorId: string;
    class: string;
    style: string | import("vue").CSSProperties;
    mdHeadingId: import("./type").MdHeadingId;
    preview: boolean;
    pageFullscreen: boolean;
    htmlPreview: boolean;
    toolbars: import("./type").ToolbarNames[];
    toolbarsExclude: import("./type").ToolbarNames[];
    noPrettier: boolean;
    tabWidth: number;
    tableShape: number[];
    placeholder: string;
    footers: import("./type").Footers[];
    scrollAuto: boolean;
    showToolbarName: boolean;
    inputBoxWitdh: string;
    modelValue: string;
    showCodeRowNumber: boolean;
    previewTheme: string;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    codeTheme: string;
    formatCopiedText: (text: string) => string;
    codeStyleReverse: boolean;
    codeStyleReverseList: string[];
    noHighlight: boolean;
    noImgZoomIn: boolean;
    customIcon: import("./type").CustomIcon;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
