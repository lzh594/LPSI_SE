import { defineComponent as I, createVNode as u, reactive as H, shallowRef as $, computed as b, watch as A, onMounted as w, onBeforeUnmount as x } from "vue";
import { p as T } from "./chunks/config.mjs";
import { b as y, C as O, P as L, g as S } from "./chunks/index4.mjs";
const N = {
  tocItem: {
    type: Object,
    default: () => ({})
  },
  mdHeadingId: {
    type: Function,
    default: () => {
    }
  },
  scrollElement: {
    type: [String, Object],
    default: ""
  },
  onClick: {
    type: Function,
    default: () => {
    }
  },
  scrollElementOffsetTop: {
    type: Number,
    default: 0
  }
}, C = /* @__PURE__ */ I({
  props: N,
  setup(l) {
    return () => {
      const {
        tocItem: n,
        mdHeadingId: d,
        scrollElement: o,
        onClick: m,
        scrollElementOffsetTop: v
      } = l;
      return u("div", {
        class: [`${T}-catalog-link`, n.active && `${T}-catalog-active`],
        onClick: (s) => {
          m(s, n), s.stopPropagation();
          const E = d(n.text, n.level, n.index), a = document.getElementById(E), t = o instanceof Element ? o : document.querySelector(o);
          if (a && t) {
            let e = a.offsetParent, c = a.offsetTop;
            if (t.contains(e))
              for (; e && t != e; )
                c += e == null ? void 0 : e.offsetTop, e = e == null ? void 0 : e.offsetParent;
            t == null || t.scrollTo({
              top: c - v,
              behavior: "smooth"
            });
          }
        }
      }, [u("span", {
        title: n.text
      }, [n.text]), u("div", {
        class: `${T}-catalog-wrapper`
      }, [n.children && n.children.map((s) => u(C, {
        mdHeadingId: d,
        key: `${n.text}-link-${s.level}-${s.text}`,
        tocItem: s,
        scrollElement: o,
        onClick: m,
        scrollElementOffsetTop: v
      }, null))])]);
    };
  }
}), M = C, F = {
  /**
   * 编辑器的Id，务必与需要绑定的编辑器Id相同
   */
  editorId: {
    type: String
  },
  class: {
    type: String,
    default: ""
  },
  mdHeadingId: {
    type: Function,
    default: (l) => l
  },
  /**
   * 指定滚动的容器，选择器需带上对应的符号，默认预览框
   * 元素必须定位！！！！！！
   *
   * 默认：#md-editor-preview-wrapper
   */
  scrollElement: {
    type: [String, Object]
  },
  theme: {
    type: String,
    default: "light"
  },
  /**
   * 高亮标题相对滚动容器顶部偏移量，即距离该值时，高亮当前目录菜单项
   *
   * 默认：20px
   */
  offsetTop: {
    type: Number,
    default: 20
  },
  /**
   * 滚动区域的固定顶部高度
   *
   * 默认：0
   */
  scrollElementOffsetTop: {
    type: Number,
    default: 0
  },
  onClick: {
    type: Function
  },
  onActive: {
    type: Function
  }
}, P = /* @__PURE__ */ I({
  name: "MdCatalog",
  props: F,
  emits: ["onClick", "onActive"],
  setup(l, n) {
    const d = l.editorId, o = H({
      list: [],
      show: !1,
      scrollElement: l.scrollElement || `#${d}-preview-wrapper`
    }), m = $(), v = b(() => {
      const t = [];
      return o.list.forEach((e, c) => {
        const {
          text: g,
          level: h
        } = e, i = {
          level: h,
          text: g,
          index: c + 1,
          active: m.value === e
        };
        if (t.length === 0)
          t.push(i);
        else {
          let r = t[t.length - 1];
          if (i.level > r.level)
            for (let f = r.level + 1; f <= 6; f++) {
              const {
                children: p
              } = r;
              if (!p) {
                r.children = [i];
                break;
              }
              if (r = p[p.length - 1], i.level <= r.level) {
                p.push(i);
                break;
              }
            }
          else
            t.push(i);
        }
      }), t;
    }), s = () => o.scrollElement instanceof HTMLElement ? o.scrollElement : document.querySelector(o.scrollElement), E = (t) => {
      if (t.length === 0)
        return o.list = [], !1;
      const {
        activeHead: e
      } = t.reduce((c, g, h) => {
        const i = document.getElementById(l.mdHeadingId(g.text, g.level, h + 1));
        if (i instanceof HTMLElement) {
          const r = s(), f = S(i, r);
          if (f < l.offsetTop && f > c.minTop)
            return {
              activeHead: g,
              minTop: f
            };
        }
        return c;
      }, {
        activeHead: t[0],
        minTop: Number.MIN_SAFE_INTEGER
      });
      m.value = e, o.list = t;
    }, a = () => {
      E(o.list);
    };
    return A(() => m.value, (t) => {
      const e = t ? {
        ...t
      } : void 0;
      l.onActive ? l.onActive(e) : n.emit("onActive", e);
    }), w(() => {
      const t = s(), e = t === document.documentElement ? window : t;
      e == null || e.addEventListener("scroll", a), y.on(d, {
        name: O,
        callback: (c) => {
          e == null || e.removeEventListener("scroll", a), E(c), e == null || e.addEventListener("scroll", a);
        }
      }), y.emit(d, L);
    }), x(() => {
      var e;
      const t = s();
      (e = t === document.documentElement ? window : t) == null || e.removeEventListener("scroll", a);
    }), () => u("div", {
      class: `${T}-catalog${l.theme === "dark" ? "-dark" : ""} ${l.class}`
    }, [v.value.map((t) => u(M, {
      mdHeadingId: l.mdHeadingId,
      tocItem: t,
      key: `link-${t.level}-${t.text}`,
      scrollElement: o.scrollElement,
      onClick: (e, c) => {
        l.onClick ? l.onClick(e, c) : n.emit("onClick", e, c);
      },
      scrollElementOffsetTop: l.scrollElementOffsetTop
    }, null))]);
  }
}), k = P;
k.install = (l) => (l.component(k.name, k), l);
export {
  k as default
};
