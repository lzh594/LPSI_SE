import { defineComponent as S, reactive as E, ref as C, watch as D, onMounted as T, onBeforeUnmount as O, cloneVNode as $, createVNode as d, inject as j } from "vue";
import { p as c } from "./config.mjs";
import { g as v } from "./vue-tsx.mjs";
const B = {
  overlay: {
    type: [String, Object],
    default: ""
  },
  visible: {
    type: Boolean,
    default: !1
  },
  onChange: {
    type: Function,
    default: () => {
    }
  },
  // 相对滚动的元素选择器
  relative: {
    type: String,
    default: "html"
  }
}, F = /* @__PURE__ */ S({
  props: B,
  setup(e, a) {
    const i = `${c}-dropdown-hidden`, t = E({
      overlayClass: [i],
      overlayStyle: {},
      triggerHover: !1,
      overlayHover: !1
    }), o = C(), n = C(), s = () => {
      var p;
      t.triggerHover = !0;
      const r = o.value, l = n.value;
      if (!r || !l)
        return;
      const u = r.getBoundingClientRect(), f = r.offsetTop, b = r.offsetLeft, H = u.height, L = u.width, w = ((p = document.querySelector(e.relative)) == null ? void 0 : p.scrollLeft) || 0;
      t.overlayStyle = {
        ...t.overlayStyle,
        top: f + H + "px",
        left: b - l.offsetWidth / 2 + L / 2 - w + "px"
      }, e.onChange(!0);
    }, m = () => {
      t.overlayHover = !0;
    };
    D(() => e.visible, (r) => {
      r ? t.overlayClass = t.overlayClass.filter((l) => l !== i) : t.overlayClass.push(i);
    });
    let h = -1;
    const g = (r) => {
      o.value === r.target ? t.triggerHover = !1 : t.overlayHover = !1, clearTimeout(h), h = window.setTimeout(() => {
        !t.overlayHover && !t.triggerHover && e.onChange(!1);
      }, 10);
    };
    return T(() => {
      o.value.addEventListener("mouseenter", s), o.value.addEventListener("mouseleave", g), n.value.addEventListener("mouseenter", m), n.value.addEventListener("mouseleave", g);
    }), O(() => {
      o.value.removeEventListener("mouseenter", s), o.value.removeEventListener("mouseleave", g), n.value.removeEventListener("mouseenter", m), n.value.removeEventListener("mouseleave", g);
    }), () => {
      const r = v({
        ctx: a
      }), l = v({
        props: e,
        ctx: a
      }, "overlay"), u = $(r instanceof Array ? r[0] : r, {
        ref: o
      }), f = d("div", {
        class: [`${c}-dropdown`, t.overlayClass],
        style: t.overlayStyle,
        ref: n
      }, [d("div", {
        class: `${c}-dropdown-overlay`
      }, [l instanceof Array ? l[0] : l])]);
      return [u, f];
    };
  }
}), I = {
  title: {
    type: String,
    default: ""
  },
  visible: {
    type: Boolean
  },
  // 展示在工具栏的内容，通常是个图标
  trigger: {
    type: [String, Object]
  },
  onChange: {
    type: Function
  },
  // 下拉框中的内容
  overlay: {
    type: [String, Object]
  },
  /**
   * ==没有意义，仅用于规避克隆组件自动嵌入insert方法时，传入的是该组件而产生的waring
   */
  insert: {
    type: Function
  },
  language: {
    type: String
  },
  theme: {
    type: String
  },
  /**
   * ==结束
   */
  default: {
    type: [String, Object]
  }
}, y = /* @__PURE__ */ S({
  name: "DropdownToolbar",
  props: I,
  emits: ["onChange"],
  setup(e, a) {
    const i = j("editorId");
    return () => {
      const t = v({
        props: e,
        ctx: a
      }, "trigger"), o = v({
        props: e,
        ctx: a
      }, "overlay"), n = v({
        props: e,
        ctx: a
      });
      return d(F, {
        relative: `#${i}-toolbar-wrapper`,
        visible: e.visible,
        onChange: (s) => {
          e.onChange instanceof Function ? e.onChange(s) : a.emit("onChange", s);
        },
        overlay: o
      }, {
        default: () => [d("div", {
          class: `${c}-toolbar-item`,
          title: e.title || ""
        }, [t, n])]
      });
    };
  }
});
y.install = (e) => (e.component(y.name, y), e);
export {
  y as D,
  F as a
};
