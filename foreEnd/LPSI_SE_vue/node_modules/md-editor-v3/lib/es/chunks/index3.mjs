import { defineComponent as v, createVNode as t, inject as k, h as M, ref as f, reactive as b, computed as j, onMounted as F, onBeforeUnmount as w, watch as p, nextTick as S } from "vue";
import { p as l, e as H } from "./config.mjs";
import { g as y } from "./vue-tsx.mjs";
import { k as g } from "./dom.mjs";
const T = /* @__PURE__ */ v({
  props: {
    name: {
      type: String,
      default: ""
    }
  },
  setup(e) {
    return () => H.iconfontType === "svg" ? t("svg", {
      class: `${l}-icon`,
      "aria-hidden": "true"
    }, [t("use", {
      "xlink:href": `#${l}-icon-${e.name}`
    }, null)]) : t("i", {
      class: `${l}-iconfont ${l}-icon-${e.name}`
    }, null);
  }
}), C = /* @__PURE__ */ v({
  props: {
    name: {
      type: String,
      default: ""
    }
  },
  setup(e) {
    const c = k("customIcon");
    return () => {
      const i = c.value[e.name];
      return typeof i == "object" ? typeof i.component == "object" ? M(i.component, i.props) : t("span", {
        innerHTML: i.component
      }, null) : t(T, {
        name: e.name
      }, null);
    };
  }
}), z = {
  title: {
    type: String,
    default: ""
  },
  visible: {
    type: Boolean,
    default: !1
  },
  width: {
    type: String,
    default: "auto"
  },
  height: {
    type: String,
    default: "auto"
  },
  onClose: {
    type: Function
  },
  showAdjust: {
    type: Boolean,
    default: !1
  },
  isFullscreen: {
    type: Boolean,
    default: !1
  },
  onAdjust: {
    type: Function,
    default: () => {
    }
  }
}, h = /* @__PURE__ */ v({
  name: "MdModal",
  props: z,
  emits: ["onClose"],
  setup(e, c) {
    const i = f(e.visible), a = f([`${l}-modal`]), m = f(), r = f();
    let d = () => {
    };
    const o = b({
      initPos: {
        left: "0px",
        top: "0px"
      },
      historyPos: {
        left: "0px",
        top: "0px"
      }
    }), P = j(() => e.isFullscreen ? {
      width: "100%",
      height: "100%"
    } : {
      width: e.width,
      height: e.height
    });
    return F(() => {
      d = g(r.value, (s, n) => {
        o.initPos.left = s + "px", o.initPos.top = n + "px";
      });
    }), w(() => {
      d();
    }), p(() => e.isFullscreen, (s) => {
      s ? d() : d = g(r.value, (n, u) => {
        o.initPos.left = n + "px", o.initPos.top = u + "px";
      });
    }), p(() => e.visible, (s) => {
      s ? (a.value.push("zoom-in"), i.value = s, S(() => {
        const n = m.value.offsetWidth / 2, u = m.value.offsetHeight / 2, $ = document.documentElement.clientWidth / 2, x = document.documentElement.clientHeight / 2;
        o.initPos.left = $ - n + "px", o.initPos.top = x - u + "px";
      }), setTimeout(() => {
        a.value = a.value.filter((n) => n !== "zoom-in");
      }, 140)) : (a.value.push("zoom-out"), setTimeout(() => {
        a.value = a.value.filter((n) => n !== "zoom-out"), i.value = s;
      }, 130));
    }), () => {
      const s = y({
        ctx: c
      }), n = y({
        props: e,
        ctx: c
      }, "title");
      return t("div", {
        style: {
          display: i.value ? "block" : "none"
        }
      }, [t("div", {
        class: `${l}-modal-mask`,
        onClick: () => {
          e.onClose ? e.onClose() : c.emit("onClose");
        }
      }, null), t("div", {
        class: a.value,
        style: {
          ...o.initPos,
          ...P.value
        },
        ref: m
      }, [t("div", {
        class: `${l}-modal-header`,
        ref: r
      }, [n || ""]), t("div", {
        class: `${l}-modal-body`
      }, [s]), t("div", {
        class: `${l}-modal-func`
      }, [e.showAdjust && t("div", {
        class: `${l}-modal-adjust`,
        onClick: (u) => {
          u.stopPropagation(), e.isFullscreen ? o.initPos = o.historyPos : (o.historyPos = o.initPos, o.initPos = {
            left: "0",
            top: "0"
          }), e.onAdjust(!e.isFullscreen);
        }
      }, [t(C, {
        name: e.isFullscreen ? "suoxiao" : "fangda"
      }, null)]), t("div", {
        class: `${l}-modal-close`,
        onClick: (u) => {
          u.stopPropagation(), e.onClose ? e.onClose() : c.emit("onClose");
        }
      }, [t(C, {
        name: "close"
      }, null)])])])]);
    };
  }
});
h.install = (e) => (e.component(h.name, h), e);
export {
  C as I,
  h as M
};
