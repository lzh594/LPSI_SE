import { defineComponent as s, createVNode as o, Fragment as d, isVNode as r } from "vue";
import { p as c } from "./chunks/config.mjs";
import { g as a } from "./chunks/vue-tsx.mjs";
import { M as f } from "./chunks/index3.mjs";
import "./chunks/dom.mjs";
import "@vavt/util";
function m(t) {
  return typeof t == "function" || Object.prototype.toString.call(t) === "[object Object]" && !r(t);
}
const g = {
  title: {
    type: String,
    default: ""
  },
  modalTitle: {
    type: String,
    default: ""
  },
  visible: {
    type: Boolean
  },
  width: {
    type: String,
    default: "auto"
  },
  height: {
    type: String,
    default: "auto"
  },
  // 展示在工具栏的内容，通常是个图标
  trigger: {
    type: [String, Object]
  },
  onClick: {
    type: Function
  },
  onClose: {
    type: Function
  },
  /**
   * 显示全屏按钮
   */
  showAdjust: {
    type: Boolean,
    default: !1
  },
  isFullscreen: {
    type: Boolean,
    default: !1
  },
  onAdjust: {
    type: Function
  },
  /**
   * ==没有意义，仅用于规避克隆组件自动嵌入insert方法时，传入的是该组件而产生的waring
   */
  insert: {
    type: Function
  },
  language: {
    type: String
  },
  theme: {
    type: String
  }
  /**
   * ==结束
   */
}, i = /* @__PURE__ */ s({
  name: "ModalToolbar",
  props: g,
  emits: ["onClick", "onClose", "onAdjust"],
  setup(t, e) {
    return () => {
      const u = a({
        props: t,
        ctx: e
      }, "trigger"), n = a({
        props: t,
        ctx: e
      }, "default");
      return o(d, null, [o("div", {
        class: `${c}-toolbar-item`,
        title: t.title,
        onClick: () => {
          t.onClick instanceof Function ? t.onClick() : e.emit("onClick");
        }
      }, [u]), o(f, {
        width: t.width,
        height: t.height,
        title: t.modalTitle,
        visible: t.visible,
        onClose: () => {
          t.onClose instanceof Function ? t.onClose() : e.emit("onClose");
        },
        showAdjust: t.showAdjust,
        isFullscreen: t.isFullscreen,
        onAdjust: (l) => {
          t.onAdjust instanceof Function ? t.onAdjust(l) : e.emit("onAdjust", l);
        }
      }, m(n) ? n : {
        default: () => [n]
      })]);
    };
  }
});
i.install = (t) => (t.component(i.name, i), t);
export {
  i as default
};
