var Ft = Object.defineProperty;
var Rt = (e, o, l) => o in e ? Ft(e, o, { enumerable: !0, configurable: !0, writable: !0, value: l }) : e[o] = l;
var q = (e, o, l) => (Rt(e, typeof o != "symbol" ? o + "" : o, l), l);
import { defineComponent as P, createVNode as t, inject as A, ref as U, onMounted as Y, reactive as G, computed as we, watch as H, nextTick as ve, Fragment as Lt, cloneVNode as gt, toRef as te, shallowRef as Pt, onBeforeUnmount as It } from "vue";
import { p as n, e as Q, n as Wt, b as Ut, M as ge, d as _t } from "./chunks/config.mjs";
import { draggingScroll as qt, linkTo as zt, debounce as Gt, createSmoothScroll as Kt, throttle as jt } from "@vavt/util";
import { a as se, D as Zt } from "./chunks/index2.mjs";
import { b as v, h as Xt, E as le, U as xe, i as Yt, j as Te, R as x, c as Jt, O as Dt, k as Et, l as Ht, T as Qt } from "./chunks/index4.mjs";
import { a as el } from "./chunks/dom.mjs";
import { M as Nt, I as y } from "./chunks/index3.mjs";
import { minimalSetup as tl, EditorView as fe } from "codemirror";
import { EditorView as Se, placeholder as ll, keymap as ol } from "@codemirror/view";
import { languages as al } from "@codemirror/language-data";
import { markdown as nl } from "@codemirror/lang-markdown";
import { EditorSelection as z, EditorState as Ce, Compartment as be, StateEffect as il } from "@codemirror/state";
import { deleteLine as rl, indentWithTab as sl, undo as cl, redo as ul } from "@codemirror/commands";
import { HighlightStyle as Bt, syntaxHighlighting as Ot, indentUnit as dl } from "@codemirror/language";
import { tags as c } from "@lezer/highlight";
import { autocompletion as ml } from "@codemirror/autocomplete";
import { c as gl, C as fl, e as hl, a as bl, u as vl, b as kl, d as Cl, f as $l, g as pl, h as yl, i as Tl, M as wl } from "./chunks/index.mjs";
import Vt from "./MdCatalog.mjs";
import { g as ft } from "./chunks/vue-tsx.mjs";
import xl from "./NormalToolbar.mjs";
import Sl from "./ModalToolbar.mjs";
import "medium-zoom";
import "copy-to-clipboard";
import "markdown-it";
import "markdown-it-image-figures";
import "markdown-it-task-lists";
import "lru-cache";
const Al = /* @__PURE__ */ P({
  setup() {
    return () => t("div", {
      class: `${n}-divider`
    }, null);
  }
}), Ml = {
  noPrettier: {
    type: Boolean
  },
  // 工具栏选择显示
  toolbars: {
    type: Array,
    default: () => []
  },
  // 工具栏选择不显示
  toolbarsExclude: {
    type: Array,
    default: () => []
  },
  setting: {
    type: Object,
    default: () => ({})
  },
  screenfull: {
    type: Object,
    default: null
  },
  screenfullJs: {
    type: String,
    default: ""
  },
  updateSetting: {
    type: Function,
    default: () => {
    }
  },
  tableShape: {
    type: Array,
    default: () => [6, 4]
  },
  defToolbars: {
    type: Object
  },
  noUploadImg: {
    type: Boolean
  },
  /**
   * 是否在工具栏下面显示对应的文字名称
   *
   * @default false
   */
  showToolbarName: {
    type: Boolean
  }
}, Ll = (e) => {
  var u, s, h, w;
  const o = A("editorId");
  let l = (s = (u = Q.editorExtensions) == null ? void 0 : u.screenfull) == null ? void 0 : s.instance;
  const a = (w = (h = Q.editorExtensions) == null ? void 0 : h.screenfull) == null ? void 0 : w.js, i = U(!1), r = (C) => {
    if (!l) {
      v.emit(o, le, {
        name: "fullscreen",
        message: "fullscreen is undefined"
      });
      return;
    }
    l.isEnabled ? (i.value = !0, (C === void 0 ? !l.isFullscreen : C) ? l.request() : l.exit()) : console.error("browser does not support screenfull!");
  }, m = () => {
    l && l.isEnabled && l.on("change", () => {
      (i.value || e.setting.fullscreen) && (i.value = !1, e.updateSetting("fullscreen"));
    });
  }, g = () => {
    l = window.screenfull, m();
  };
  return Y(() => {
    if (m(), !l) {
      const C = document.createElement("script");
      C.src = a || Wt, C.onload = g, C.id = `${n}-screenfull`, el(C, "screenfull");
    }
  }), Y(() => {
    v.on(o, {
      name: Xt,
      callback: r
    });
  }), { fullscreenHandler: r };
}, Il = {
  tableShape: {
    type: Array,
    default: () => [6, 4]
  },
  onSelected: {
    type: Function,
    default: () => {
    }
  }
}, Dl = /* @__PURE__ */ P({
  name: "TableShape",
  props: Il,
  setup(e) {
    const o = G({
      x: -1,
      y: -1
    });
    return () => t("div", {
      class: `${n}-table-shape`,
      onMouseleave: () => {
        o.x = -1, o.y = -1;
      }
    }, [new Array(e.tableShape[1]).fill("").map((l, a) => t("div", {
      class: `${n}-table-shape-row`,
      key: `table-shape-row-${a}`
    }, [new Array(e.tableShape[0]).fill("").map((i, r) => t("div", {
      class: `${n}-table-shape-col`,
      key: `table-shape-col-${r}`,
      onMouseenter: () => {
        o.x = a, o.y = r;
      },
      onClick: () => {
        e.onSelected(o);
      }
    }, [t("div", {
      class: [`${n}-table-shape-col-default`, a <= o.x && r <= o.y && `${n}-table-shape-col-include`]
    }, null)]))]))]);
  }
}), El = Dl, Hl = {
  type: {
    type: String,
    default: "link"
  },
  visible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, Nl = /* @__PURE__ */ P({
  props: Hl,
  setup(e) {
    const o = A("usedLanguageText"), l = A("editorId"), a = we(() => {
      var r, m;
      switch (e.type) {
        case "link":
          return (r = o.value.linkModalTips) == null ? void 0 : r.linkTitle;
        case "image":
          return (m = o.value.linkModalTips) == null ? void 0 : m.imageTitle;
        default:
          return "";
      }
    }), i = G({
      desc: "",
      url: ""
    });
    return H(() => e.visible, (r) => {
      r || setTimeout(() => {
        i.desc = "", i.url = "";
      }, 200);
    }), () => t(Nt, {
      title: a.value,
      visible: e.visible,
      onClose: e.onCancel
    }, {
      default: () => {
        var r, m, g, u, s;
        return [t("div", {
          class: `${n}-form-item`
        }, [t("label", {
          class: `${n}-label`,
          for: `link-desc-${l}`
        }, [(r = o.value.linkModalTips) == null ? void 0 : r.descLabel]), t("input", {
          placeholder: (m = o.value.linkModalTips) == null ? void 0 : m.descLabelPlaceHolder,
          class: `${n}-input`,
          id: `link-desc-${l}`,
          type: "text",
          value: i.desc,
          onChange: (h) => {
            i.desc = h.target.value;
          },
          autocomplete: "off"
        }, null)]), t("div", {
          class: `${n}-form-item`
        }, [t("label", {
          class: `${n}-label`,
          for: `link-url-${l}`
        }, [(g = o.value.linkModalTips) == null ? void 0 : g.urlLabel]), t("input", {
          placeholder: (u = o.value.linkModalTips) == null ? void 0 : u.urlLabelPlaceHolder,
          class: `${n}-input`,
          id: `link-url-${l}`,
          type: "text",
          value: i.url,
          onChange: (h) => {
            i.url = h.target.value;
          },
          autocomplete: "off"
        }, null)]), t("div", {
          class: `${n}-form-item`
        }, [t("button", {
          class: [`${n}-btn`, `${n}-btn-row`],
          type: "button",
          onClick: () => {
            e.onOk(i), i.desc = "", i.url = "";
          }
        }, [(s = o.value.linkModalTips) == null ? void 0 : s.buttonOK])])];
      }
    });
  }
}), Bl = {
  visible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, Ol = /* @__PURE__ */ P({
  props: Bl,
  setup(e) {
    var h, w, C;
    const o = A("usedLanguageText"), l = A("editorId");
    let a = (C = (w = (h = Q) == null ? void 0 : h.editorExtensions) == null ? void 0 : w.cropper) == null ? void 0 : C.instance;
    const i = U(), r = U(), m = U(), g = G({
      cropperInited: !1,
      imgSelected: !1,
      imgSrc: "",
      // 是否全屏
      isFullscreen: !1
    });
    let u = null;
    H(() => e.visible, () => {
      e.visible && !g.cropperInited && (a = a || window.Cropper, i.value.onchange = () => {
        if (!a) {
          v.emit(l, le, {
            name: "Cropper",
            message: "Cropper is undefined"
          });
          return;
        }
        const d = i.value.files || [];
        if (g.imgSelected = !0, (d == null ? void 0 : d.length) > 0) {
          const k = new FileReader();
          k.onload = (f) => {
            g.imgSrc = f.target.result, ve(() => {
              u = new a(r.value, {
                viewMode: 2,
                preview: `.${n}-clip-preview-target`
                // aspectRatio: 16 / 9,
              });
            });
          }, k.readAsDataURL(d[0]);
        }
      });
    }), H(() => [g.imgSelected], () => {
      m.value.style = "";
    }), H(() => g.isFullscreen, () => {
      ve(() => {
        u == null || u.destroy(), m.value.style = "", r.value && (u = new a(r.value, {
          viewMode: 2,
          preview: `.${n}-clip-preview-target`
          // aspectRatio: 16 / 9,
        }));
      });
    });
    const s = () => {
      u.clear(), u.destroy(), u = null, i.value.value = "", g.imgSelected = !1;
    };
    return () => {
      var d;
      return t(Nt, {
        class: `${n}-modal-clip`,
        title: (d = o.value.clipModalTips) == null ? void 0 : d.title,
        visible: e.visible,
        onClose: e.onCancel,
        showAdjust: !0,
        isFullscreen: g.isFullscreen,
        onAdjust: (k) => {
          g.isFullscreen = k;
        },
        width: "668px",
        height: "421px"
      }, {
        default: () => {
          var k, f;
          return [t("div", {
            class: `${n}-form-item ${n}-clip`
          }, [t("div", {
            class: `${n}-clip-main`
          }, [g.imgSelected ? t("div", {
            class: `${n}-clip-cropper`
          }, [t("img", {
            src: g.imgSrc,
            ref: r,
            style: {
              display: "none"
            },
            alt: ""
          }, null), t("div", {
            class: `${n}-clip-delete`,
            onClick: s
          }, [t(y, {
            name: "delete"
          }, null)])]) : t("div", {
            class: `${n}-clip-upload`,
            onClick: () => {
              i.value.click();
            }
          }, [t(y, {
            name: "upload"
          }, null)])]), t("div", {
            class: `${n}-clip-preview`
          }, [t("div", {
            class: `${n}-clip-preview-target`,
            ref: m
          }, null)])]), t("div", {
            class: `${n}-form-item`
          }, [t("button", {
            class: `${n}-btn`,
            type: "button",
            onClick: () => {
              if (u) {
                const b = u.getCroppedCanvas();
                v.emit(l, xe, [Yt(b.toDataURL("image/png"))], e.onOk), s();
              }
            }
          }, [((k = o.value.clipModalTips) == null ? void 0 : k.buttonUpload) || ((f = o.value.linkModalTips) == null ? void 0 : f.buttonOK)])]), t("input", {
            ref: i,
            accept: "image/*",
            type: "file",
            multiple: !1,
            style: {
              display: "none"
            }
          }, null)];
        }
      });
    };
  }
}), Vl = {
  type: {
    type: String,
    default: "link"
  },
  linkVisible: {
    type: Boolean,
    default: !1
  },
  clipVisible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, Fl = /* @__PURE__ */ P({
  props: Vl,
  setup(e) {
    return () => t(Lt, null, [t(Nl, {
      type: e.type,
      visible: e.linkVisible,
      onOk: e.onOk,
      onCancel: e.onCancel
    }, null), t(Ol, {
      visible: e.clipVisible,
      onOk: e.onOk,
      onCancel: e.onCancel
    }, null)]);
  }
}), Rl = /* @__PURE__ */ P({
  name: "MDEditorToolbar",
  props: Ml,
  setup(e) {
    const o = A("editorId"), l = A("usedLanguageText"), a = A("theme"), i = A("language"), {
      fullscreenHandler: r
    } = Ll(e), m = `${o}-toolbar-wrapper`, g = U(), u = G({
      title: !1,
      catalog: !1,
      // 图片上传下拉
      image: !1,
      // 表格预选
      table: !1,
      // mermaid
      mermaid: !1,
      katex: !1
    }), s = (b, $) => {
      v.emit(o, x, b, $);
    }, h = G({
      type: "link",
      linkVisible: !1,
      clipVisible: !1
    }), w = U();
    Y(() => {
      v.on(o, {
        name: Te,
        callback(b) {
          h.type = b, h.linkVisible = !0;
        }
      });
    });
    const C = we(() => {
      const b = e.toolbars.filter((I) => !e.toolbarsExclude.includes(I)), $ = b.indexOf("="), T = $ === -1 ? b : b.slice(0, $ + 1), S = $ === -1 ? [] : b.slice($, Number.MAX_SAFE_INTEGER);
      return [T, S];
    }), d = U(), k = () => {
      v.emit(o, xe, Array.from(d.value.files || [])), d.value.value = "";
    };
    Y(() => {
      d.value.addEventListener("change", k);
    });
    const f = (b) => {
      var $, T, S, I, D, oe, ae, M, L, _, W, O, N, B, V, K, j, de, ne, J, Z, ie, X, F, R, re, me, Ae, Me, Le, Ie, De, Ee, He, Ne, Be, Oe, Ve, Fe, Re, Pe, We, Ue, _e, qe, ze, Ge, Ke, je, Ze, Xe, Ye, Je, Qe, et, tt, lt, ot, at, nt, it, rt, st, ct, ut, dt, mt;
      if (Ut.includes(b))
        switch (b) {
          case "-":
            return t(Al, null, null);
          case "bold":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: ($ = l.value.toolbarTips) == null ? void 0 : $.bold,
              onClick: () => {
                s("bold");
              }
            }, [t(y, {
              name: "bold"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(T = l.value.toolbarTips) == null ? void 0 : T.bold])]);
          case "underline":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (S = l.value.toolbarTips) == null ? void 0 : S.underline,
              onClick: () => {
                s("underline");
              }
            }, [t(y, {
              name: "underline"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(I = l.value.toolbarTips) == null ? void 0 : I.underline])]);
          case "italic":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (D = l.value.toolbarTips) == null ? void 0 : D.italic,
              onClick: () => {
                s("italic");
              }
            }, [t(y, {
              name: "italic"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(oe = l.value.toolbarTips) == null ? void 0 : oe.italic])]);
          case "strikeThrough":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (ae = l.value.toolbarTips) == null ? void 0 : ae.strikeThrough,
              onClick: () => {
                s("strikeThrough");
              }
            }, [t(y, {
              name: "strike-through"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(M = l.value.toolbarTips) == null ? void 0 : M.strikeThrough])]);
          case "title":
            return t(se, {
              relative: `#${m}`,
              visible: u.title,
              onChange: (p) => {
                u.title = p;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  u.title = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h1");
                }
              }, [(L = l.value.titleItem) == null ? void 0 : L.h1]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h2");
                }
              }, [(_ = l.value.titleItem) == null ? void 0 : _.h2]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h3");
                }
              }, [(W = l.value.titleItem) == null ? void 0 : W.h3]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h4");
                }
              }, [(O = l.value.titleItem) == null ? void 0 : O.h4]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h5");
                }
              }, [(N = l.value.titleItem) == null ? void 0 : N.h5]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h6");
                }
              }, [(B = l.value.titleItem) == null ? void 0 : B.h6])])
            }, {
              default: () => {
                var p, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (p = l.value.toolbarTips) == null ? void 0 : p.title
                }, [t(y, {
                  name: "title"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.title])])];
              }
            });
          case "sub":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (V = l.value.toolbarTips) == null ? void 0 : V.sub,
              onClick: () => {
                s("sub");
              }
            }, [t(y, {
              name: "sub"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(K = l.value.toolbarTips) == null ? void 0 : K.sub])]);
          case "sup":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (j = l.value.toolbarTips) == null ? void 0 : j.sup,
              onClick: () => {
                s("sup");
              }
            }, [t(y, {
              name: "sup"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(de = l.value.toolbarTips) == null ? void 0 : de.sup])]);
          case "quote":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (ne = l.value.toolbarTips) == null ? void 0 : ne.quote,
              onClick: () => {
                s("quote");
              }
            }, [t(y, {
              name: "quote"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(J = l.value.toolbarTips) == null ? void 0 : J.quote])]);
          case "unorderedList":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Z = l.value.toolbarTips) == null ? void 0 : Z.unorderedList,
              onClick: () => {
                s("unorderedList");
              }
            }, [t(y, {
              name: "unordered-list"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(ie = l.value.toolbarTips) == null ? void 0 : ie.unorderedList])]);
          case "orderedList":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (X = l.value.toolbarTips) == null ? void 0 : X.orderedList,
              onClick: () => {
                s("orderedList");
              }
            }, [t(y, {
              name: "ordered-list"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(F = l.value.toolbarTips) == null ? void 0 : F.orderedList])]);
          case "task":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (R = l.value.toolbarTips) == null ? void 0 : R.task,
              onClick: () => {
                s("task");
              }
            }, [t(y, {
              name: "task"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(re = l.value.toolbarTips) == null ? void 0 : re.task])]);
          case "codeRow":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (me = l.value.toolbarTips) == null ? void 0 : me.codeRow,
              onClick: () => {
                s("codeRow");
              }
            }, [t(y, {
              name: "code-row"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Ae = l.value.toolbarTips) == null ? void 0 : Ae.codeRow])]);
          case "code":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Me = l.value.toolbarTips) == null ? void 0 : Me.code,
              onClick: () => {
                s("code");
              }
            }, [t(y, {
              name: "code"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Le = l.value.toolbarTips) == null ? void 0 : Le.code])]);
          case "link":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ie = l.value.toolbarTips) == null ? void 0 : Ie.link,
              onClick: () => {
                h.type = "link", h.linkVisible = !0;
              }
            }, [t(y, {
              name: "link"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(De = l.value.toolbarTips) == null ? void 0 : De.link])]);
          case "image":
            return e.noUploadImg ? t("div", {
              class: `${n}-toolbar-item`,
              title: (Ee = l.value.toolbarTips) == null ? void 0 : Ee.image,
              onClick: () => {
                h.type = "image", h.linkVisible = !0;
              }
            }, [t(y, {
              name: "image"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(He = l.value.toolbarTips) == null ? void 0 : He.image])]) : t(se, {
              relative: `#${m}`,
              visible: u.image,
              onChange: (p) => {
                u.image = p;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  u.title = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item ${n}-menu-item-image`,
                onClick: () => {
                  h.type = "image", h.linkVisible = !0;
                }
              }, [(Ne = l.value.imgTitleItem) == null ? void 0 : Ne.link]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-image`,
                onClick: () => {
                  d.value.click();
                }
              }, [(Be = l.value.imgTitleItem) == null ? void 0 : Be.upload]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-image`,
                onClick: () => {
                  h.clipVisible = !0;
                }
              }, [(Oe = l.value.imgTitleItem) == null ? void 0 : Oe.clip2upload])])
            }, {
              default: () => {
                var p, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (p = l.value.toolbarTips) == null ? void 0 : p.image
                }, [t(y, {
                  name: "image"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.image])])];
              }
            });
          case "table":
            return t(se, {
              relative: `#${m}`,
              visible: u.table,
              onChange: (p) => {
                u.table = p;
              },
              key: "bar-table",
              overlay: t(El, {
                tableShape: e.tableShape,
                onSelected: (p) => {
                  s("table", {
                    selectedShape: p
                  });
                }
              }, null)
            }, {
              default: () => {
                var p, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (p = l.value.toolbarTips) == null ? void 0 : p.table
                }, [t(y, {
                  name: "table"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.table])])];
              }
            });
          case "revoke":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ve = l.value.toolbarTips) == null ? void 0 : Ve.revoke,
              onClick: () => {
                v.emit(o, Ht);
              }
            }, [t(y, {
              name: "revoke"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Fe = l.value.toolbarTips) == null ? void 0 : Fe.revoke])]);
          case "next":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Re = l.value.toolbarTips) == null ? void 0 : Re.next,
              onClick: () => {
                v.emit(o, Et);
              }
            }, [t(y, {
              name: "next"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Pe = l.value.toolbarTips) == null ? void 0 : Pe.next])]);
          case "save":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (We = l.value.toolbarTips) == null ? void 0 : We.save,
              onClick: () => {
                v.emit(o, Dt);
              }
            }, [t(y, {
              name: "baocun"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Ue = l.value.toolbarTips) == null ? void 0 : Ue.save])]);
          case "prettier":
            return e.noPrettier ? "" : t("div", {
              class: `${n}-toolbar-item`,
              title: (_e = l.value.toolbarTips) == null ? void 0 : _e.prettier,
              onClick: () => {
                s("prettier");
              }
            }, [t(y, {
              name: "prettier"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(qe = l.value.toolbarTips) == null ? void 0 : qe.prettier])]);
          case "pageFullscreen":
            return !e.setting.fullscreen && t("div", {
              class: `${n}-toolbar-item`,
              title: (ze = l.value.toolbarTips) == null ? void 0 : ze.pageFullscreen,
              onClick: () => {
                e.updateSetting("pageFullscreen");
              }
            }, [t(y, {
              name: e.setting.pageFullscreen ? "suoxiao" : "fangda"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Ge = l.value.toolbarTips) == null ? void 0 : Ge.pageFullscreen])]);
          case "fullscreen":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ke = l.value.toolbarTips) == null ? void 0 : Ke.fullscreen,
              onClick: () => {
                r();
              }
            }, [t(y, {
              name: e.setting.fullscreen ? "fullscreen-exit" : "fullscreen"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(je = l.value.toolbarTips) == null ? void 0 : je.fullscreen])]);
          case "preview":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ze = l.value.toolbarTips) == null ? void 0 : Ze.preview,
              onClick: () => {
                e.updateSetting("preview");
              }
            }, [t(y, {
              name: "preview"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Xe = l.value.toolbarTips) == null ? void 0 : Xe.preview])]);
          case "htmlPreview":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ye = l.value.toolbarTips) == null ? void 0 : Ye.htmlPreview,
              onClick: () => {
                e.updateSetting("htmlPreview");
              }
            }, [t(y, {
              name: "coding"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Je = l.value.toolbarTips) == null ? void 0 : Je.htmlPreview])]);
          case "catalog":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Qe = l.value.toolbarTips) == null ? void 0 : Qe.catalog,
              onClick: () => {
                v.emit(o, Jt);
              },
              key: "bar-catalog"
            }, [t(y, {
              name: "catalog"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(et = l.value.toolbarTips) == null ? void 0 : et.catalog])]);
          case "github":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (tt = l.value.toolbarTips) == null ? void 0 : tt.github,
              onClick: () => zt("https://github.com/imzbf/md-editor-v3")
            }, [t(y, {
              name: "github"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(lt = l.value.toolbarTips) == null ? void 0 : lt.github])]);
          case "mermaid":
            return t(se, {
              relative: `#${m}`,
              visible: u.mermaid,
              onChange: (p) => {
                u.mermaid = p;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  u.mermaid = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("flow");
                }
              }, [(ot = l.value.mermaid) == null ? void 0 : ot.flow]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("sequence");
                }
              }, [(at = l.value.mermaid) == null ? void 0 : at.sequence]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("gantt");
                }
              }, [(nt = l.value.mermaid) == null ? void 0 : nt.gantt]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("class");
                }
              }, [(it = l.value.mermaid) == null ? void 0 : it.class]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("state");
                }
              }, [(rt = l.value.mermaid) == null ? void 0 : rt.state]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("pie");
                }
              }, [(st = l.value.mermaid) == null ? void 0 : st.pie]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("relationship");
                }
              }, [(ct = l.value.mermaid) == null ? void 0 : ct.relationship]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("journey");
                }
              }, [(ut = l.value.mermaid) == null ? void 0 : ut.journey])]),
              key: "bar-mermaid"
            }, {
              default: () => {
                var p, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (p = l.value.toolbarTips) == null ? void 0 : p.mermaid
                }, [t(y, {
                  name: "mermaid"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.mermaid])])];
              }
            });
          case "katex":
            return t(se, {
              relative: `#${m}`,
              visible: u.katex,
              onChange: (p) => {
                u.katex = p;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  u.katex = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item ${n}-menu-item-katex`,
                onClick: () => {
                  s("katexInline");
                }
              }, [(dt = l.value.katex) == null ? void 0 : dt.inline]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-katex`,
                onClick: () => {
                  s("katexBlock");
                }
              }, [(mt = l.value.katex) == null ? void 0 : mt.block])]),
              key: "bar-katex"
            }, {
              default: () => {
                var p, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (p = l.value.toolbarTips) == null ? void 0 : p.katex
                }, [t(y, {
                  name: "formula"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.katex])])];
              }
            });
        }
      else if (e.defToolbars instanceof Array) {
        const p = e.defToolbars[b];
        return p ? gt(p, {
          theme: a.value,
          language: i.value,
          insert(ke) {
            v.emit(o, x, "universal", {
              generate: ke
            });
          }
        }) : "";
      } else if (e.defToolbars && e.defToolbars.children instanceof Array) {
        const p = e.defToolbars.children[b];
        return p ? gt(p, {
          theme: a.value,
          language: i.value,
          insert(ke) {
            v.emit(o, x, "universal", {
              generate: ke
            });
          }
        }) : "";
      } else
        return "";
    };
    return H(() => e.toolbars, () => {
      ve(() => {
        g.value && qt(g.value);
      });
    }, {
      immediate: !0
    }), () => {
      const b = C.value[0].map((T) => f(T)), $ = C.value[1].map((T) => f(T));
      return t(Lt, null, [e.toolbars.length > 0 && t("div", {
        class: `${n}-toolbar-wrapper`,
        ref: g,
        id: m
      }, [t("div", {
        class: [`${n}-toolbar`, e.showToolbarName && `${n}-stn`]
      }, [t("div", {
        class: `${n}-toolbar-left`,
        ref: w
      }, [b]), t("div", {
        class: `${n}-toolbar-right`
      }, [$])])]), t("input", {
        ref: d,
        accept: "image/*",
        type: "file",
        multiple: !0,
        style: {
          display: "none"
        }
      }, null), t(Fl, {
        linkVisible: h.linkVisible,
        clipVisible: h.clipVisible,
        type: h.type,
        onCancel: () => {
          h.linkVisible = !1, h.clipVisible = !1;
        },
        onOk: (T) => {
          T && s(h.type, {
            desc: T.desc,
            url: T.url
          }), h.linkVisible = !1, h.clipVisible = !1;
        }
      }, null)]);
    };
  }
}), Pl = (e, o) => {
  const l = Gt(() => {
    e.removeEventListener("scroll", a), e.addEventListener("scroll", a), o.removeEventListener("scroll", a), o.addEventListener("scroll", a);
  }, 50), a = (i) => {
    const r = e.clientHeight, m = o.clientHeight, g = e.scrollHeight, u = o.scrollHeight, s = (g - r) / (u - m);
    i.target === e ? (o.removeEventListener("scroll", a), o.scrollTo({
      top: e.scrollTop / s
      // behavior: 'smooth'
    }), l()) : (e.removeEventListener("scroll", a), e.scrollTo({
      top: o.scrollTop * s
      // behavior: 'smooth'
    }), l());
  };
  return [
    () => {
      l().finally(() => {
        e.dispatchEvent(new Event("scroll"));
      });
    },
    () => {
      e.removeEventListener("scroll", a), o.removeEventListener("scroll", a);
    }
  ];
}, Wl = (e, o, l) => {
  const { view: a } = l, i = Kt(), r = (C) => a.lineBlockAt(a.state.doc.line(C).from).top, m = (C) => a.lineBlockAt(a.state.doc.line(C).from).height;
  let g = [];
  const u = () => {
    g = [];
    const C = Array.from(o.querySelectorAll("[data-line]")).map(
      (b) => Number(b.dataset.line) + 1
    ), { lines: d } = a.state.doc;
    let k = 1, f = C.shift() ?? d;
    for (let b = 1; b <= d; b++)
      b === f && (k = b, f = C.shift() || d + 1), g.push({
        start: k,
        end: f - 1
      });
  };
  let s = 0, h = 0;
  const w = jt((C) => {
    var $, T, S, I, D, oe, ae;
    if (!(($ = o.firstElementChild) != null && $.firstElementChild))
      return;
    const d = a.lineBlockAtHeight(a.scrollDOM.scrollTop), { number: k } = a.state.doc.lineAt(d.from);
    if (k > g.length || a.state.doc.lines < g[g.length - 1].end)
      return;
    let f = +getComputedStyle(o).paddingTop.replace("px", "");
    const b = +getComputedStyle(o).paddingBottom.replace("px", "");
    if (C.target === e) {
      if (h !== 0)
        return;
      s++;
      const M = g[k - 1];
      let L = r(M.end) + m(M.end), _ = 0;
      const W = r(M.start), O = o.querySelector(`[data-line="${M.start - 1}"]`) || ((T = o.firstElementChild) == null ? void 0 : T.firstElementChild), N = o.querySelector(`[data-line="${M.end}"]`) || ((S = o.lastElementChild) == null ? void 0 : S.lastElementChild);
      let B = 0, V = 0;
      W === 0 ? O === N ? (f = 0, L = a.contentDOM.offsetHeight - a.scrollDOM.offsetHeight, _ = a.scrollDOM.scrollTop / L, B = N.offsetTop + N.offsetHeight - o.clientHeight) : (_ = a.scrollDOM.scrollTop / L, B = N.offsetTop) : L > a.scrollDOM.scrollHeight - a.scrollDOM.clientHeight ? (_ = (a.scrollDOM.scrollTop - W) / (a.scrollDOM.scrollHeight - a.scrollDOM.clientHeight - W), V = O.offsetTop, B = o.scrollHeight - o.clientHeight - V + 10) : (_ = (a.scrollDOM.scrollTop - W) / (L - W), V = O.offsetTop, B = N.offsetTop - V);
      const K = V - f + B * _;
      i(o, K, () => {
        s--;
      });
    } else {
      if (s !== 0)
        return;
      h++;
      const M = Array.from(
        o.querySelectorAll("[data-line]")
      ), L = o.scrollTop, _ = o.scrollHeight;
      let W = M.length === 0 ? 1 : Math.ceil(
        Number(M[M.length - 1].dataset.line) * (L / _)
      ), O = (I = o.firstElementChild) == null ? void 0 : I.firstElementChild;
      for (let F = W; F >= 0; F--) {
        const R = o.querySelector(`[data-line="${F}"]`);
        if (R && R.offsetTop <= L) {
          O = R, W = F;
          break;
        }
      }
      let N = (D = o.firstElementChild) == null ? void 0 : D.firstElementChild, B = (oe = o.firstElementChild) == null ? void 0 : oe.lastElementChild;
      for (; M.length > 0; ) {
        const F = M.indexOf(O);
        if (F + 1 >= M.length)
          break;
        const R = M[F + 1];
        if (F === -1) {
          B = R;
          break;
        }
        const re = O.offsetTop;
        if (re > L) {
          if (F === 0) {
            N = O, B = R;
            break;
          }
          O = M[F - 1];
          continue;
        }
        const me = R.offsetTop;
        if (re <= L && me > L) {
          N = O, B = R;
          break;
        }
        O = R;
      }
      const V = N.offsetTop;
      let K = B.offsetTop, j = 0;
      const { start: de, end: ne } = g[Number(N.dataset.line || 0)], J = r(de);
      let Z = r(ne);
      const ie = m(ne);
      let X = 0;
      N === ((ae = o.firstElementChild) == null ? void 0 : ae.firstElementChild) ? (N === B ? (K = B.offsetHeight - o.offsetHeight + f + b, X = a.contentDOM.offsetHeight - a.scrollDOM.offsetHeight) : X = Z + ie - J, j = Math.max(L / K, 0)) : Z > a.scrollDOM.scrollHeight - a.scrollDOM.clientHeight ? (j = Math.max(
        (L - V) / (o.scrollHeight - V - o.clientHeight),
        0
      ), Z = r(a.state.doc.lines) + m(a.state.doc.lines), X = 8 + Z - J - e.clientHeight) : (j = Math.max(
        (L - V) / (K - V),
        0
      ), X = Z + ie - J), i(e, J + X * j, () => {
        h--;
      });
    }
  }, 10);
  return [
    () => {
      u(), e.addEventListener("scroll", w), o.addEventListener("scroll", w), e.dispatchEvent(new Event("scroll"));
    },
    () => {
      g = [], e.removeEventListener("scroll", w), o.removeEventListener("scroll", w);
    }
  ];
}, Ul = (e, o, l) => {
  const a = A("editorId");
  let i = () => {
  }, r = () => {
  };
  const m = () => {
    i();
    const g = document.querySelector(
      `#${a} .cm-scroller`
    ), u = document.querySelector(
      `[id="${a}-preview-wrapper"][data-show="true"]`
    ), s = document.querySelector(
      `[id="${a}-html-wrapper"][data-show="true"]`
    );
    (u || s) && ([r, i] = (u ? Wl : Pl)(
      g,
      u || s,
      l.value
    )), e.scrollAuto && r();
  };
  H(
    [
      o,
      te(e.setting, "preview"),
      te(e.setting, "htmlPreview"),
      te(e.setting, "fullscreen"),
      te(e.setting, "pageFullscreen")
    ],
    () => {
      ve(m);
    }
  ), H(
    () => e.scrollAuto,
    (g) => {
      g ? r() : i();
    }
  ), Y(m);
}, _l = Ul, ql = (e, o, l) => {
  var h, w, C, d, k, f;
  let a = "", i = 0, r = 0, m = !0, g = !1;
  const u = o.getSelectedText(), s = (h = Q.editorConfig) == null ? void 0 : h.mermaidTemplate;
  if (/^h[1-6]{1}$/.test(e)) {
    const b = e.replace(/^h(\d)/, ($, T) => new Array(Number(T)).fill("#", 0, T).join(""));
    a = `${b} ${u}`, i = b.length + 1;
  } else if (e === "prettier") {
    const b = window.prettier || ((C = (w = Q.editorExtensions) == null ? void 0 : w.prettier) == null ? void 0 : C.prettierInstance), $ = [
      ((d = window.prettierPlugins) == null ? void 0 : d.markdown) || ((f = (k = Q.editorExtensions) == null ? void 0 : k.prettier) == null ? void 0 : f.parserMarkdownInstance)
    ];
    !b || $[0] === void 0 ? (v.emit(l.editorId, le, {
      name: "prettier",
      message: "prettier is undefined"
    }), a = o.getValue()) : a = b.format(o.getValue(), {
      parser: "markdown",
      plugins: $
    }), m = !1, g = !0;
  } else
    switch (e) {
      case "bold": {
        a = `**${u}**`, i = 2, r = -2;
        break;
      }
      case "underline": {
        a = `<u>${u}</u>`, i = 3, r = -4;
        break;
      }
      case "italic": {
        a = `*${u}*`, i = 1, r = -1;
        break;
      }
      case "strikeThrough": {
        a = `~~${u}~~`, i = 2, r = -2;
        break;
      }
      case "sub": {
        a = `<sub>${u}</sub>`, i = 5, r = -6;
        break;
      }
      case "sup": {
        a = `<sup>${u}</sup>`, i = 5, r = -6;
        break;
      }
      case "codeRow": {
        a = "`" + u + "`", i = 1, r = -1;
        break;
      }
      case "quote": {
        a = `> ${u}`, i = 2;
        break;
      }
      case "orderedList": {
        a = `1. ${u}`, i = 3;
        break;
      }
      case "unorderedList": {
        a = `- ${u}`, i = 2;
        break;
      }
      case "task": {
        a = `- [ ] ${u}`, i = 6;
        break;
      }
      case "code": {
        const b = l.text || u || "", $ = l.mode || "language";
        a = `\`\`\`${$}
${b}
\`\`\`
`, i = 3, r = 3 + $.length - a.length;
        break;
      }
      case "table": {
        a = "|";
        const { selectedShape: b = { x: 1, y: 1 } } = l, { x: $, y: T } = b;
        for (let S = 0; S <= T; S++)
          a += " col |";
        a += `
|`;
        for (let S = 0; S <= T; S++)
          a += " - |";
        for (let S = 0; S <= $; S++) {
          a += `
|`;
          for (let I = 0; I <= T; I++)
            a += " content |";
        }
        i = 2, r = 5 - a.length;
        break;
      }
      case "link": {
        const { desc: b, url: $ } = l;
        a = `[${b}](${$})`, m = !1;
        break;
      }
      case "image": {
        const { desc: b, url: $, urls: T } = l;
        T instanceof Array ? a = T.reduce((S, I) => S + `![${b}](${I})
`, "") : a = `![${b}](${$})
`, m = !1;
        break;
      }
      case "flow": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.flow) || `flowchart TD 
  Start --> Stop`}
\`\`\`
`, i = 3, r = 10 - a.length;
        break;
      }
      case "sequence": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.sequence) || `sequenceDiagram
  A->>B: hello!
  B-->>A: hi!
  A-)B: bye!`}
\`\`\`
`, i = 3, r = 10 - a.length;
        break;
      }
      case "gantt": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.gantt) || `gantt
title A Gantt Diagram
dateFormat  YYYY-MM-DD
section Section
A task  :a1, 2014-01-01, 30d
Another task  :after a1, 20d`}
\`\`\`
`, i = 3, r = 10 - a.length;
        break;
      }
      case "class": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.class) || `classDiagram
  class Animal
  Vehicle <|-- Car`}
\`\`\`
`, i = 3, r = 10 - a.length;
        break;
      }
      case "state": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.state) || `stateDiagram-v2
  s1 --> s2`}
\`\`\`
`, i = 3, r = 10 - a.length;
        break;
      }
      case "pie": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.pie) || `pie title Pets adopted by volunteers
  "Dogs" : 386
  "Cats" : 85
  "Rats" : 15`}
\`\`\`
`, i = 3, r = 10 - a.length;
        break;
      }
      case "relationship": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.relationship) || `erDiagram
  CAR ||--o{ NAMED-DRIVER : allows
  PERSON ||--o{ NAMED-DRIVER : is`}
\`\`\`
`, i = 3, r = 10 - a.length;
        break;
      }
      case "journey": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.journey) || `journey
  title My working day
  section Go to work
    Make tea: 5: Me
    Go upstairs: 3: Me
    Do work: 1: Me, Cat
  section Go home
    Go downstairs: 5: Me
    Sit down: 5: Me`}
\`\`\`
`, i = 3, r = 10 - a.length;
        break;
      }
      case "katexInline": {
        a = "$$", i = 1, r = -1;
        break;
      }
      case "katexBlock": {
        a = `$$

$$
`, i = 3, r = -4;
        break;
      }
      case "universal": {
        const { generate: b } = l, $ = b(u);
        a = $.targetValue, m = $.select, i = $.deviationStart, r = $.deviationEnd;
      }
    }
  return {
    text: a,
    options: {
      // 是否选中
      select: m,
      // 选中时，开始位置的偏移量
      deviationStart: i,
      // 结束的偏移量
      deviationEnd: r,
      // 是否整个替换
      replaceAll: g
    }
  };
}, zl = "#e5c07b", ht = "var(--md-color)", Gl = "#56b6c2", Kl = "#ffffff", ce = "var(--md-color)", bt = "#e5c07b", jl = "#e5c07b", Zl = "var(--md-color)", vt = "#d19a66", Xl = "#c678dd", Yl = "#21252b", Jl = "#2c313a", kt = "var(--md-bk-color)", $e = "var(--md-bk-color)", Ql = "#ceedfa33", Ct = "#528bff", eo = Se.theme(
  {
    "&": {
      color: ce,
      backgroundColor: kt
    },
    ".cm-content": {
      caretColor: Ct
    },
    ".cm-cursor, .cm-dropCursor": { borderLeftColor: Ct },
    "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: Ql },
    ".cm-panels": { backgroundColor: Yl, color: ce },
    ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
    ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
    ".cm-searchMatch": {
      backgroundColor: "#72a1ff59",
      outline: "1px solid #457dff"
    },
    ".cm-searchMatch.cm-searchMatch-selected": {
      backgroundColor: "#6199ff2f"
    },
    ".cm-activeLine": { backgroundColor: "#ceedfa33" },
    ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
    "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bad0f847"
    },
    ".cm-gutters": {
      backgroundColor: kt,
      color: ce,
      borderRight: "1px solid",
      borderColor: "var(--md-border-color)"
    },
    ".cm-activeLineGutter": {
      backgroundColor: Jl
    },
    ".cm-foldPlaceholder": {
      backgroundColor: "transparent",
      border: "none",
      color: "#ddd"
    },
    ".cm-tooltip": {
      border: "1px solid var(--md-border-color)",
      backgroundColor: $e
    },
    ".cm-tooltip .cm-tooltip-arrow:before": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    },
    ".cm-tooltip .cm-tooltip-arrow:after": {
      borderTopColor: $e,
      borderBottomColor: $e
    },
    ".cm-tooltip-autocomplete": {
      "& > ul > li[aria-selected]": {
        color: ce
      }
    }
  },
  { dark: !0 }
), to = Bt.define([
  { tag: c.keyword, color: Xl },
  { tag: [c.name, c.deleted, c.character, c.propertyName, c.macroName], color: ht },
  { tag: [c.function(c.variableName), c.labelName], color: jl },
  { tag: [c.color, c.constant(c.name), c.standard(c.name)], color: vt },
  { tag: [c.definition(c.name), c.separator], color: ce },
  {
    tag: [
      c.typeName,
      c.className,
      c.number,
      c.changed,
      c.annotation,
      c.modifier,
      c.self,
      c.namespace
    ],
    color: zl
  },
  {
    tag: [
      c.operator,
      c.operatorKeyword,
      c.url,
      c.escape,
      c.regexp,
      c.link,
      c.special(c.string)
    ],
    color: Gl
  },
  { tag: [c.meta, c.comment], color: bt },
  { tag: c.strong, fontWeight: "bold" },
  { tag: c.emphasis, fontStyle: "italic" },
  { tag: c.strikethrough, textDecoration: "line-through" },
  { tag: c.link, color: bt, textDecoration: "underline" },
  { tag: c.heading, fontWeight: "bold", color: ht },
  { tag: [c.atom, c.bool, c.special(c.variableName)], color: vt },
  { tag: [c.processingInstruction, c.string, c.inserted], color: Zl },
  { tag: c.invalid, color: Kl }
]), $t = [
  eo,
  Ot(to)
], lo = "#e5c07b", pt = "#3f4a54", oo = "#56b6c2", ao = "#fff", ue = "#3f4a54", yt = "#2d8cf0", no = "#2d8cf0", io = "#3f4a54", Tt = "#d19a66", ro = "#c678dd", so = "#21252b", co = "#ceedfa33", wt = "var(--md-bk-color)", pe = "var(--md-bk-color)", uo = "#bad5fa", xt = "#3f4a54", mo = Se.theme(
  {
    "&": {
      color: ue,
      backgroundColor: wt
    },
    ".cm-content": {
      caretColor: xt
    },
    ".cm-cursor, .cm-dropCursor": { borderLeftColor: xt },
    "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: uo },
    ".cm-panels": { backgroundColor: so, color: ue },
    ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
    ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
    ".cm-searchMatch": {
      backgroundColor: "#72a1ff59",
      outline: "1px solid #457dff"
    },
    ".cm-searchMatch.cm-searchMatch-selected": {
      backgroundColor: "#6199ff2f"
    },
    ".cm-activeLine": { backgroundColor: "#ceedfa33" },
    ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
    "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bad0f847"
    },
    ".cm-gutters": {
      backgroundColor: wt,
      color: ue,
      borderRight: "1px solid",
      borderColor: "var(--md-border-color)"
    },
    ".cm-activeLineGutter": {
      backgroundColor: co
    },
    ".cm-foldPlaceholder": {
      backgroundColor: "transparent",
      border: "none",
      color: "#ddd"
    },
    ".cm-tooltip": {
      border: "1px solid var(--md-border-color)",
      backgroundColor: pe
    },
    ".cm-tooltip .cm-tooltip-arrow:before": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    },
    ".cm-tooltip .cm-tooltip-arrow:after": {
      borderTopColor: pe,
      borderBottomColor: pe
    },
    ".cm-tooltip-autocomplete": {
      "& > ul > li[aria-selected]": {
        color: ue
      }
    }
  }
  // { dark: true }
), go = Bt.define([
  { tag: c.keyword, color: ro },
  { tag: [c.name, c.deleted, c.character, c.propertyName, c.macroName], color: pt },
  { tag: [c.function(c.variableName), c.labelName], color: no },
  { tag: [c.color, c.constant(c.name), c.standard(c.name)], color: Tt },
  { tag: [c.definition(c.name), c.separator], color: ue },
  {
    tag: [
      c.typeName,
      c.className,
      c.number,
      c.changed,
      c.annotation,
      c.modifier,
      c.self,
      c.namespace
    ],
    color: lo
  },
  {
    tag: [
      c.operator,
      c.operatorKeyword,
      c.url,
      c.escape,
      c.regexp,
      c.link,
      c.special(c.string)
    ],
    color: oo
  },
  { tag: [c.meta, c.comment], color: yt },
  { tag: c.strong, fontWeight: "bold" },
  { tag: c.emphasis, fontStyle: "italic" },
  { tag: c.strikethrough, textDecoration: "line-through" },
  { tag: c.link, color: yt, textDecoration: "underline" },
  { tag: c.heading, fontWeight: "bold", color: pt },
  { tag: [c.atom, c.bool, c.special(c.variableName)], color: Tt },
  { tag: [c.processingInstruction, c.string, c.inserted], color: io },
  { tag: c.invalid, color: ao }
]), St = [
  mo,
  Ot(go)
], he = (e, o, l, a, i) => (r, m, g, u) => {
  const s = `${e}${o}`.slice(u - g);
  r.dispatch(r.state.replaceSelection(`${s}${l}${a}`));
  const h = g + m.label.length + (i === "title" ? l.length : 0);
  r.dispatch({
    selection: z.create(
      [
        z.range(
          g + m.label.length + (i === "title" ? 1 : -o.length),
          h
        ),
        z.cursor(h)
      ],
      1
    )
  }), r.focus();
}, At = (e) => (o, l, a, i) => {
  const r = e.slice(i - a);
  o.dispatch(o.state.replaceSelection(`${r} `));
}, fo = (e) => {
  const o = (l) => {
    const a = l.matchBefore(
      /^#+|^-\s*\[*\s*\]*|`+|\[|!\[*|^\|\s?\|?|^\$\$?|!+\s*\w*/
    );
    return a === null || a.from == a.to && l.explicit ? null : {
      from: a.from,
      options: [
        // 标题
        ...["h1", "h2", "h3", "h4", "h5", "h6"].map((i, r) => {
          const m = new Array(r + 1).fill("#").join("");
          return {
            label: m,
            type: "text",
            apply: At(m)
          };
        }),
        // 任务列表
        ...["unchecked", "checked"].map((i) => {
          const r = i === "checked" ? "- [x]" : "- [ ]";
          return {
            label: r,
            type: "text",
            apply: At(r)
          };
        }),
        // 代码
        ...[
          ["`", ""],
          ["```", "language"],
          ["```mermaid\n", ""]
        ].map((i) => ({
          label: `${i[0]}${i[1]}`,
          type: "text",
          apply: he(i[0], i[1], "", i[0] === "`" ? "`" : "\n```", "type")
        })),
        // 链接
        {
          label: "[]()",
          type: "text"
        },
        {
          label: "![]()",
          type: "text"
        },
        // 表格
        {
          label: "| |",
          type: "text",
          detail: "table",
          apply: `| col | col | col |
| - | - | - |
| content | content | content |
| content | content | content |`
        },
        // 公式
        {
          label: "$",
          type: "text",
          apply: he("$", "", "", "$", "type")
        },
        {
          label: "$$",
          type: "text",
          apply: he("$$", "", `
`, `
$$`, "title")
        },
        // 那啥？
        ...[
          "note",
          "abstract",
          "info",
          "tip",
          "success",
          "question",
          "warning",
          "failure",
          "danger",
          "bug",
          "example",
          "quote",
          "hint",
          "caution",
          "error",
          "attention"
        ].map((i) => ({
          label: `!!! ${i}`,
          type: "text",
          apply: he("!!!", ` ${i}`, " Title", `

!!!`, "title")
        }))
      ]
    };
  };
  return ml({
    override: e ? [o, ...e] : [o]
  });
}, Mt = fo, ee = (e) => {
  const o = new be();
  return (a) => (o.get(e.state) ? e.dispatch({ effects: o.reconfigure(a) }) : e.dispatch({
    effects: il.appendConfig.of(o.of(a))
  }), !0);
};
class ho {
  constructor(o) {
    q(this, "view");
    q(this, "maxLength", Number.MAX_SAFE_INTEGER);
    // 切换tabSize的执行方法。切换时，Compartment实例需要相同
    q(this, "toggleTabSize");
    q(this, "togglePlaceholder");
    /**
     * 设置全部的扩展
     */
    q(this, "setExtensions");
    q(this, "toggleDisabled");
    q(this, "toggleReadOnly");
    q(this, "toggleMaxlength");
    this.view = o, this.toggleTabSize = ee(this.view), this.togglePlaceholder = ee(this.view), this.setExtensions = ee(this.view), this.toggleDisabled = ee(this.view), this.toggleReadOnly = ee(this.view), this.toggleMaxlength = ee(this.view);
  }
  getValue() {
    return this.view.state.doc.toString();
  }
  /**
   * 设置内容
   *
   * @param insert 待插入内容
   * @param from 插入开始位置
   * @param to 插入结束位置
   */
  setValue(o, l = 0, a = this.view.state.doc.length) {
    this.view.dispatch({
      changes: {
        from: l,
        to: a,
        insert: o
      }
    });
  }
  /**
   * 获取选中的文本
   */
  getSelectedText() {
    const { from: o, to: l } = this.view.state.selection.main;
    return this.view.state.sliceDoc(o, l);
  }
  /**
   * 使用新的内容替换选中的内容
   *
   * @param text 待替换内容
   * @param options 替换后是否选中
   */
  replaceSelectedText(o, l = {
    // 是否选中
    select: !0,
    // 选中时，开始位置的偏移量
    deviationStart: 0,
    // 结束的偏移量
    deviationEnd: 0,
    // 直接替换所有文本
    replaceAll: !1
  }, a) {
    try {
      if (l.replaceAll) {
        if (this.setValue(o), o.length > this.maxLength)
          throw new Error("The input text is too long");
        return;
      }
      if (this.view.state.doc.length - this.getSelectedText().length + o.length > this.maxLength)
        throw new Error("The input text is too long");
      const { from: i } = this.view.state.selection.main;
      if (this.view.dispatch(this.view.state.replaceSelection(o)), l.select) {
        const r = i + o.length + l.deviationEnd;
        this.view.dispatch({
          selection: z.create(
            [
              z.range(i + l.deviationStart, r),
              z.cursor(r)
            ],
            1
          )
        });
      }
      this.view.focus();
    } catch (i) {
      if (i.message === "The input text is too long")
        v.emit(a, le, {
          name: "overlength",
          message: i.message,
          data: o
        });
      else
        throw i;
    }
  }
  /**
   * 设置tabSize
   *
   * @param tabSize 需要切换的大小
   */
  setTabSize(o) {
    this.toggleTabSize([
      Ce.tabSize.of(o),
      dl.of(" ".repeat(o))
    ]);
  }
  /**
   * 设置placeholder
   *
   * @param t 目标内容
   */
  setPlaceholder(o) {
    this.togglePlaceholder(ll(o));
  }
  focus(o) {
    if (this.view.focus(), !o)
      return;
    let l = 0, a = 0, i = 0;
    switch (o) {
      case "start":
        break;
      case "end": {
        l = a = i = this.getValue().length;
        break;
      }
      default:
        l = o.rangeAnchor || o.cursorPos, a = o.rangeHead || o.cursorPos, i = o.cursorPos;
    }
    this.view.dispatch({
      scrollIntoView: !0,
      selection: z.create(
        [z.range(l, a), z.cursor(i)],
        1
      )
    });
  }
  setDisabled(o) {
    this.toggleDisabled([Se.editable.of(!o)]);
  }
  setReadOnly(o) {
    this.toggleReadOnly([Ce.readOnly.of(o)]);
  }
  setMaxLength(o) {
    this.maxLength = o, this.toggleMaxlength([
      Ce.changeFilter.of((l) => l.newDoc.length <= o)
    ]);
  }
}
const bo = (e) => {
  const o = A("editorId");
  return (a) => {
    if (!a.clipboardData)
      return;
    if (a.clipboardData.files.length > 0) {
      const { files: r } = a.clipboardData;
      v.emit(
        o,
        xe,
        Array.from(r).filter((m) => /image\/.*/.test(m.type))
      ), a.preventDefault();
      return;
    }
    if (e.autoDetectCode && a.clipboardData.types.includes("vscode-editor-data")) {
      const r = JSON.parse(a.clipboardData.getData("vscode-editor-data"));
      v.emit(o, x, "code", {
        mode: r.mode,
        text: a.clipboardData.getData("text/plain")
      }), a.preventDefault();
      return;
    }
    const i = a.clipboardData.getData("text/plain");
    e.maxlength && i.length + e.modelValue.length > e.maxlength && v.emit(o, le, {
      name: "overlength",
      message: "The input text is too long",
      data: i
    });
  };
}, vo = bo, ko = (e) => {
  const o = A("editorId");
  Y(() => {
    v.on(o, {
      name: Qt,
      callback(l) {
        var a;
        (a = e.value) == null || a.focus(l);
      }
    });
  });
}, Co = ko, $o = (e, o) => [
  {
    key: "Ctrl-b",
    mac: "Cmd-b",
    run: () => (v.emit(e, x, "bold"), !0)
  },
  {
    key: "Ctrl-d",
    mac: "Cmd-d",
    run: rl,
    preventDefault: !0
  },
  {
    key: "Ctrl-s",
    mac: "Cmd-s",
    run: (I) => (v.emit(e, Dt, I.state.doc.toString()), !0),
    shift: () => (v.emit(e, x, "strikeThrough"), !0)
  },
  {
    key: "Ctrl-u",
    mac: "Cmd-u",
    run: () => (v.emit(e, x, "underline"), !0),
    shift: () => (v.emit(e, x, "unorderedList"), !0)
  },
  {
    key: "Ctrl-i",
    mac: "Cmd-i",
    run: () => (v.emit(e, x, "italic"), !0),
    shift: () => (v.emit(e, Te, "image"), !0)
  },
  {
    key: "Ctrl-1",
    mac: "Cmd-1",
    run: () => (v.emit(e, x, "h1"), !0)
  },
  {
    key: "Ctrl-2",
    mac: "Cmd-2",
    run: () => (v.emit(e, x, "h2"), !0)
  },
  {
    key: "Ctrl-3",
    mac: "Cmd-3",
    run: () => (v.emit(e, x, "h3"), !0)
  },
  {
    key: "Ctrl-4",
    mac: "Cmd-4",
    run: () => (v.emit(e, x, "h4"), !0)
  },
  {
    key: "Ctrl-5",
    mac: "Cmd-5",
    run: () => (v.emit(e, x, "h5"), !0)
  },
  {
    key: "Ctrl-6",
    mac: "Cmd-6",
    run: () => (v.emit(e, x, "h6"), !0)
  },
  {
    key: "Ctrl-ArrowUp",
    mac: "Cmd-ArrowUp",
    run: () => (v.emit(e, x, "sup"), !0)
  },
  {
    key: "Ctrl-ArrowDown",
    mac: "Cmd-ArrowDown",
    run: () => (v.emit(e, x, "sub"), !0)
  },
  {
    key: "Ctrl-o",
    mac: "Cmd-o",
    run: () => (v.emit(e, x, "orderedList"), !0)
  },
  {
    key: "Ctrl-c",
    mac: "Cmd-c",
    shift: () => (v.emit(e, x, "code"), !0),
    any(I, D) {
      return (D.ctrlKey || D.metaKey) && D.altKey && D.code === "KeyC" ? (v.emit(e, x, "codeRow"), !0) : !1;
    }
  },
  {
    key: "Ctrl-l",
    mac: "Cmd-l",
    run: () => (v.emit(e, Te, "link"), !0)
  },
  {
    key: "Ctrl-f",
    mac: "Cmd-f",
    shift: () => o.noPrettier ? !1 : (v.emit(e, x, "prettier"), !0)
  },
  {
    any: (I, D) => (D.ctrlKey || D.metaKey) && D.altKey && D.shiftKey && D.code === "KeyT" ? (v.emit(e, x, "table"), !0) : !1
  }
], po = $o, yo = (e) => {
  const o = A("tabWidth"), l = A("editorId"), a = A("theme"), i = U(), r = Pt(), m = new be(), g = new be(), u = new be(), s = po(l, e), h = vo(e), w = [
    ol.of([...s, sl]),
    tl,
    m.of(nl({ codeLanguages: al })),
    // 横向换行
    fe.lineWrapping,
    fe.updateListener.of((d) => {
      d.docChanged && e.onChange(d.state.doc.toString());
    }),
    fe.domEventHandlers({
      paste: h,
      blur: e.onBlur,
      focus: e.onFocus,
      drop: e.onDrop,
      input: (d) => {
        e.onInput && e.onInput(d);
        const { data: k } = d;
        e.maxlength && e.modelValue.length + k.length > e.maxlength && v.emit(l, le, {
          name: "overlength",
          message: "The input text is too long",
          data: k
        });
      }
    })
  ], C = () => {
    const d = [
      ...w,
      g.of(a.value === "light" ? St : $t),
      u.of(Mt(e.completions))
    ];
    return Q.codeMirrorExtensions(a.value, d, [
      ...s
    ]);
  };
  return Y(() => {
    const d = new fe({
      doc: e.modelValue,
      parent: i.value,
      extensions: [C()]
    }), k = new ho(d);
    r.value = k, setTimeout(() => {
      k.setTabSize(o), k.setDisabled(e.disabled), k.setReadOnly(e.readonly), e.placeholder && k.setPlaceholder(e.placeholder), typeof e.maxlength == "number" && k.setMaxLength(e.maxlength), e.autofocus && d.focus();
    }, 0), v.on(l, {
      name: Ht,
      callback() {
        cl(d);
      }
    }), v.on(l, {
      name: Et,
      callback() {
        ul(d);
      }
    }), v.on(l, {
      name: x,
      callback(f, b = {}) {
        var S;
        const { text: $, options: T } = ql(f, r.value, b);
        (S = r.value) == null || S.replaceSelectedText($, T, l);
      }
    });
  }), H(
    a,
    () => {
      var d;
      (d = r.value) == null || d.view.dispatch({
        effects: g.reconfigure(a.value === "light" ? St : $t)
      });
    },
    {
      deep: !0
    }
  ), H(
    () => e.completions,
    () => {
      var d;
      (d = r.value) == null || d.view.dispatch({
        effects: u.reconfigure(Mt(e.completions))
      });
    },
    {
      deep: !0
    }
  ), H(
    () => e.modelValue,
    () => {
      var d, k;
      ((d = r.value) == null ? void 0 : d.getValue()) !== e.modelValue && ((k = r.value) == null || k.setValue(e.modelValue));
    }
  ), H(
    () => e.placeholder,
    () => {
      var d;
      (d = r.value) == null || d.setPlaceholder(e.placeholder);
    }
  ), H(
    () => e.disabled,
    () => {
      var d;
      (d = r.value) == null || d.setDisabled(e.disabled);
    }
  ), H(
    () => e.readonly,
    () => {
      var d;
      (d = r.value) == null || d.setDisabled(e.readonly);
    }
  ), H(
    () => e.maxlength,
    () => {
      var d;
      e.maxlength && ((d = r.value) == null || d.setMaxLength(e.maxlength));
    }
  ), Co(r), {
    inputWrapperRef: i,
    codeMirrorUt: r
  };
}, To = yo, wo = (e, o, l) => {
  const a = G({
    resizedWidth: e.inputBoxWitdh
  }), i = G({
    width: e.inputBoxWitdh
  }), r = G({
    left: e.inputBoxWitdh,
    display: "initial"
  }), m = (s) => {
    var k, f, b;
    const h = ((k = o.value) == null ? void 0 : k.offsetWidth) || 0, w = ((f = o.value) == null ? void 0 : f.getBoundingClientRect().x) || 0;
    let C = s.x - w;
    C < ge ? C = ge : C > h - ge && (C = h - ge);
    const d = `${C}px`;
    i.width = d, r.left = d, a.resizedWidth = d, (b = e.onInputBoxWitdhChange) == null || b.call(e, d);
  }, g = () => {
    document.addEventListener("mousemove", m);
  }, u = () => {
    document.removeEventListener("mousemove", m);
  };
  return Y(() => {
    var s;
    (s = l.value) == null || s.addEventListener("mousedown", g), document.addEventListener("mouseup", u);
  }), It(() => {
    var s, h;
    (s = l.value) == null || s.removeEventListener("mousedown", g), (h = l.value) == null || h.removeEventListener("mouseup", u);
  }), H(
    () => e.inputBoxWitdh,
    (s) => {
      s && (i.width = s, r.left = s);
    }
  ), H(
    [te(e.setting, "htmlPreview"), te(e.setting, "preview")],
    () => {
      !e.setting.htmlPreview && !e.setting.preview ? (i.width = "100%", r.display = "none") : (i.width = a.resizedWidth, r.display = "initial");
    },
    {
      immediate: !0
    }
  ), { inputWrapperStyle: i, resizeOperateStyle: r };
}, xo = wo, So = /* @__PURE__ */ P({
  name: "MDEditorContent",
  props: gl,
  setup(e) {
    const o = A("editorId"), l = U(""), a = U(), i = U(), {
      inputWrapperRef: r,
      codeMirrorUt: m
    } = To(e), {
      inputWrapperStyle: g,
      resizeOperateStyle: u
    } = xo(e, a, i);
    return _l(e, l, m), () => t("div", {
      class: `${n}-content${e.setting.htmlPreview || e.setting.preview ? " has-preview" : ""}`,
      ref: a
    }, [t("div", {
      class: `${n}-input-wrapper`,
      style: g,
      ref: r
    }, null), (e.setting.htmlPreview || e.setting.preview) && t("div", {
      class: `${n}-resize-operate`,
      style: u,
      ref: i
    }, null), t(fl, {
      modelValue: e.modelValue,
      setting: e.setting,
      onHtmlChanged: (s) => {
        l.value = s, e.onHtmlChanged(s);
      },
      onGetCatalog: e.onGetCatalog,
      mdHeadingId: e.mdHeadingId,
      noMermaid: e.noMermaid,
      sanitize: e.sanitize,
      noKatex: e.noKatex,
      formatCopiedText: e.formatCopiedText,
      noHighlight: e.noHighlight,
      noImgZoomIn: e.noImgZoomIn
    }, null), e.catalogVisible && t(Vt, {
      theme: e.theme,
      class: `${n}-catalog-editor`,
      editorId: o,
      mdHeadingId: e.mdHeadingId,
      key: "internal-catalog"
    }, null)]);
  }
}), Ao = /* @__PURE__ */ P({
  props: {
    modelValue: {
      type: String,
      default: ""
    }
  },
  setup(e) {
    const o = A("usedLanguageText");
    return () => {
      var l, a;
      return t("div", {
        class: `${n}-footer-item`
      }, [t("label", {
        class: `${n}-footer-label`
      }, [`${(l = o.value.footer) == null ? void 0 : l.markdownTotal}:`]), t("span", null, [((a = e.modelValue) == null ? void 0 : a.length) || 0])]);
    };
  }
}), Mo = {
  checked: {
    type: Boolean,
    default: !1
  },
  onChange: {
    type: Function,
    default: () => {
    }
  }
}, Lo = /* @__PURE__ */ P({
  props: Mo,
  setup(e) {
    return () => t("div", {
      class: [`${n}-checkbox`, e.checked && `${n}-checkbox-checked`],
      onClick: () => {
        e.onChange(!e.checked);
      }
    }, null);
  }
}), Io = {
  scrollAuto: {
    type: Boolean
  },
  onScrollAutoChange: {
    type: Function,
    default: () => {
    }
  }
}, Do = /* @__PURE__ */ P({
  props: Io,
  setup(e) {
    const o = A("usedLanguageText");
    return () => {
      var l;
      return t("div", {
        class: `${n}-footer-item`
      }, [t("label", {
        class: `${n}-footer-label`,
        onClick: () => {
          e.onScrollAutoChange(!e.scrollAuto);
        }
      }, [(l = o.value.footer) == null ? void 0 : l.scrollAuto]), t(Lo, {
        checked: e.scrollAuto,
        onChange: e.onScrollAutoChange
      }, null)]);
    };
  }
}), Eo = {
  modelValue: {
    type: String,
    default: ""
  },
  footers: {
    type: Array,
    default: []
  },
  scrollAuto: {
    type: Boolean
  },
  onScrollAutoChange: {
    type: Function,
    default: () => {
    }
  },
  defFooters: {
    type: Object
  }
}, Ho = /* @__PURE__ */ P({
  name: "MDEditorFooter",
  props: Eo,
  setup(e) {
    const o = we(() => {
      const a = e.footers.indexOf("="), i = a === -1 ? e.footers : e.footers.slice(0, a), r = a === -1 ? [] : e.footers.slice(a, Number.MAX_SAFE_INTEGER);
      return [i, r];
    }), l = (a) => {
      if (_t.includes(a))
        switch (a) {
          case "markdownTotal":
            return t(Ao, {
              modelValue: e.modelValue
            }, null);
          case "scrollSwitch":
            return t(Do, {
              scrollAuto: e.scrollAuto,
              onScrollAutoChange: e.onScrollAutoChange
            }, null);
        }
      else
        return e.defFooters instanceof Array ? e.defFooters[a] || "" : e.defFooters && e.defFooters.children instanceof Array && e.defFooters.children[a] || "";
    };
    return () => {
      const a = o.value[0].map((r) => l(r)), i = o.value[1].map((r) => l(r));
      return t("div", {
        class: `${n}-footer`
      }, [t("div", {
        class: `${n}-footer-left`
      }, [a]), t("div", {
        class: `${n}-footer-right`
      }, [i])]);
    };
  }
}), No = /* @__PURE__ */ P({
  name: "MdEditorV3",
  props: hl,
  emits: bl,
  setup(e, o) {
    const {
      editorId: l,
      noKatex: a,
      noMermaid: i,
      noPrettier: r,
      noUploadImg: m,
      noHighlight: g
    } = e, u = G({
      scrollAuto: e.scrollAuto
    });
    vl(e, o), kl(e), Cl(e), $l(e, o);
    const [s, h] = pl(e, o), w = yl(e);
    return It(() => {
      v.clear(l);
    }), Tl(e, o, w, s, h), () => {
      var k;
      const C = ft({
        props: e,
        ctx: o
      }, "defToolbars"), d = ft({
        props: e,
        ctx: o
      }, "defFooters");
      return t("div", {
        id: l,
        class: [n, e.class, e.theme === "dark" && `${n}-dark`, s.fullscreen || s.pageFullscreen ? `${n}-fullscreen` : ""],
        style: e.style
      }, [t(Rl, {
        noPrettier: r,
        toolbars: e.toolbars,
        toolbarsExclude: e.toolbarsExclude,
        setting: s,
        updateSetting: h,
        tableShape: e.tableShape,
        defToolbars: C,
        noUploadImg: m,
        showToolbarName: e.showToolbarName
      }, null), t(So, {
        modelValue: e.modelValue,
        setting: s,
        mdHeadingId: e.mdHeadingId,
        noMermaid: i,
        noPrettier: r,
        sanitize: e.sanitize,
        placeholder: e.placeholder,
        noKatex: a,
        scrollAuto: u.scrollAuto,
        formatCopiedText: e.formatCopiedText,
        autofocus: e.autoFocus,
        disabled: e.disabled,
        readonly: e.readOnly,
        maxlength: e.maxLength,
        autoDetectCode: e.autoDetectCode,
        noHighlight: g,
        onChange: (f) => {
          e.onChange ? e.onChange(f) : (o.emit("update:modelValue", f), o.emit("onChange", f));
        },
        onHtmlChanged: (f) => {
          e.onHtmlChanged ? e.onHtmlChanged(f) : o.emit("onHtmlChanged", f);
        },
        onGetCatalog: (f) => {
          e.onGetCatalog ? e.onGetCatalog(f) : o.emit("onGetCatalog", f);
        },
        onBlur: (f) => {
          e.onBlur ? e.onBlur(f) : o.emit("onBlur", f);
        },
        onFocus: (f) => {
          e.onFocus ? e.onFocus(f) : o.emit("onFocus", f);
        },
        onInput: (f) => {
          e.onInput ? e.onInput(f) : o.emit("onInput", f);
        },
        completions: e.completions,
        catalogVisible: w.value,
        theme: e.theme,
        noImgZoomIn: e.noImgZoomIn,
        onDrop: (f) => {
          e.onDrop ? e.onDrop(f) : o.emit("onDrop", f);
        },
        inputBoxWitdh: e.inputBoxWitdh,
        onInputBoxWitdhChange: (f) => {
          e.onInputBoxWitdhChange ? e.onInputBoxWitdhChange(f) : o.emit("onInputBoxWitdhChange", f);
        }
      }, null), ((k = e.footers) == null ? void 0 : k.length) > 0 && t(Ho, {
        modelValue: e.modelValue,
        footers: e.footers,
        defFooters: d,
        scrollAuto: u.scrollAuto,
        onScrollAutoChange: (f) => u.scrollAuto = f
      }, null)]);
    };
  }
}), ye = No;
ye.install = (e) => (e.component(ye.name, ye), e.use(xl).use(Zt).use(Sl).use(Vt).use(wl), e);
export {
  ye as default
};
